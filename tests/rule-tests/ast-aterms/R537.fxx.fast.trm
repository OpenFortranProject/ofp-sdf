Program(
  [ MainProgram(
      no-program-stmt()
    , Scope(
        [ TypeDeclarationStmt(
            no-label()
          , CHARACTER(IntVal("10"))
          , []
          , [Var("NAME", CHARACTER(IntVal("10")), no-init())]
          )
        , TypeDeclarationStmt(
            no-label()
          , INTEGER()
          , [Dimension([Range(IntVal("0"), IntVal("9"))])]
          , [Var("MILES", INTEGER(), no-init())]
          )
        , TypeDeclarationStmt(
            no-label()
          , REAL()
          , [ Dimension(
                [Range(no-lower-bound(), IntVal("100")), Range(no-lower-bound(), IntVal("100"))]
              )
            ]
          , [Var("SKEW", REAL(), no-init())]
          )
        , TypeDeclarationStmt(
            no-label()
          , DerivedType("NODE", [])
          , [POINTER()]
          , [Var("HEAD_OF_LIST", DerivedType("NODE", []), no-init())]
          )
        , TypeDeclarationStmt(
            no-label()
          , DerivedType("PERSON", [])
          , []
          , [ Var("MYNAME", DerivedType("PERSON", []), no-init())
            , Var("YOURNAME", DerivedType("PERSON", []), no-init())
            ]
          )
        , DataStmt(
            no-label()
          , [ DataStmtSet([VarRef("NAME")], [DataStmtValue(no-repeat(), "'JOHN DOE'")])
            , DataStmtSet(
                [VarRef("MILES")]
              , [DataStmtValue(DataStmtRepeat("10"), IntVal("0"))]
              )
            ]
          )
        , DataStmt(
            no-label()
          , [ DataStmtSet(
                [ DataImpliedDo(
                    [ DataImpliedDo(
                        [PartRef("SKEW", [VarRef("K"), VarRef("J")], no-image-selector())]
                      , DataIDoVariable(VarRef("J"))
                      , IntVal("1")
                      , VarRef("K")
                      , no-expr()
                      )
                    ]
                  , DataIDoVariable(VarRef("K"))
                  , IntVal("1")
                  , IntVal("100")
                  , no-expr()
                  )
                ]
              , [DataStmtValue(DataStmtRepeat("5050"), RealVal("0.0"))]
              )
            ]
          )
        , DataStmt(
            no-label()
          , [ DataStmtSet(
                [ DataImpliedDo(
                    [ DataImpliedDo(
                        [PartRef("SKEW", [VarRef("K"), VarRef("J")], no-image-selector())]
                      , DataIDoVariable(VarRef("J"))
                      , Plus(VarRef("K"), IntVal("1"))
                      , IntVal("100")
                      , no-expr()
                      )
                    ]
                  , DataIDoVariable(VarRef("K"))
                  , IntVal("1")
                  , IntVal("99")
                  , no-expr()
                  )
                ]
              , [DataStmtValue(DataStmtRepeat("4950"), RealVal("1.0"))]
              )
            ]
          )
        , DataStmt(
            no-label()
          , [ DataStmtSet(
                [VarRef("HEAD_OF_LIST")]
              , [DataStmtValue(no-repeat(), FunctionReference("NULL", []))]
              )
            ]
          )
        , DataStmt(
            no-label()
          , [ DataStmtSet(
                [VarRef("MYNAME")]
              , [DataStmtValue(
                   no-repeat()
                 , PartRef("PERSON", [IntVal("21"), "'JOHN SMITH'"], no-image-selector())
                 )]
              )
            ]
          )
        , DataStmt(
            no-label()
          , [ DataStmtSet(
                [ DataRef([VarRef("YOURNAME"), VarRef("AGE")])
                , DataRef([VarRef("YOURNAME"), VarRef("NAME")])
                ]
              , [DataStmtValue(no-repeat(), IntVal("35")), DataStmtValue(no-repeat(), "'FRED BROWN'")]
              )
            ]
          ){Comment("

")}
        ]
      , []
      , []
      )
    , EndProgramStmt(no-label(), no-name()){Comment("

")}
    )
  ]
){Comment("!! R537 data-implied-do
!    is ( data-i-do-object-list, data-i-do-variable
!       = scalar-int-constant-expr, scalar-int-constant-expr [ , scalar-int-constant-expr ] )
!
! From NOTE 5.29
!
")}
