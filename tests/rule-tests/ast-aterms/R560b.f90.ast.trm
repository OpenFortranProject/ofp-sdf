Program(
  "!! R560 implicit-stmt\n!    is IMPLICIT implicit-spec-list\n!    or IMPLICIT NONE\n!\n!! R561 implicit-spec\n!    is declaration-type-spec ( letter-spec-list )\n!\n!! R562 letter-spec\n!    is letter [ â€“ letter ]\n!\n! From NOTE 5.37\n\n"
, [ Module(
      ModuleStmt(no-label(), "EXAMPLE_MODULE", eos("\n   "))
    , SpecificationPart(
        []
      , []
      , ImplicitPart([], ImplicitNoneStmt(no-label(), eos("\n!   ...\n   ")))
      , [ InterfaceBlock(
            InterfaceStmt(no-label(), no-generic-spec(), eos("\n      "))
          , [ InterfaceBody(
                FunctionStmt(
                  no-label()
                , no-prefix()
                , "FUN"
                , ["I"]
                , no-suffix()
                , eos("! Not all data entities need to\n         ")
                )
              , SpecificationPart(
                  []
                , []
                , no-implicit-part()
                , [ TypeDeclarationStmt(
                      no-label()
                    , IntrinsicType(INTEGER(no-kind()))
                    , no-list()
                    , [EntityDecl("FUN", no-list(), no-list(), no-char-length(), no-init())]
                    , eos("! be declared explicitly\n      ")
                    )
                  ]
                )
              , EndFunctionStmt(no-label(), "FUN", eos("\n   "))
              )
            ]
          , EndInterfaceStmt(no-label(), no-generic-spec(), eos("\n"))
          )
        ]
      )
    , ModuleSubprogramPart(
        ContainsStmt(no-label(), eos("\n   "))
      , [ FunctionSubprogram(
            FunctionStmt(
              no-label()
            , no-prefix()
            , "JFUN"
            , ["J"]
            , no-suffix()
            , eos("! All data entities need to\n      ")
            )
          , initial-spec-part([], [])
          , SpecAndExecPart(
              [ TypeDeclarationStmt(
                  no-label()
                , IntrinsicType(INTEGER(no-kind()))
                , no-list()
                , [ EntityDecl("JFUN", no-list(), no-list(), no-char-length(), no-init())
                  , EntityDecl("J", no-list(), no-list(), no-char-length(), no-init())
                  ]
                , eos("! be declared explicitly.\n!      ...\n   ")
                )
              ]
            )
          , no-subprogram-part()
          , EndFunctionStmt(no-label(), "JFUN", eos("\n\n"))
          )
        ]
      )
    , EndModuleStmt(no-label(), "EXAMPLE_MODULE", eos("\n"))
    )
  , SubroutineSubprogram(
      SubroutineStmt(no-label(), no-prefix(), "SUB", no-list(), no-language-binding(), eos("\n   "))
    , initial-spec-part([], [])
    , SpecAndExecPart(
        [ ImplicitStmt(
            no-label()
          , [ImplicitSpec(IntrinsicType(COMPLEX(no-kind())), [LetterSpec("C", no-letter())])]
          , eos("\n   ")
          )
        , AssignmentStmt(
            no-label()
          , DataRef([PartRef("C", no-section-subscripts(), no-image-selector())])
          , ComplexLiteralConstant(RealLiteralConstant("3.0", no-kind()), RealLiteralConstant("2.0", no-kind()))
          , eos("! C is implicitly declared COMPLEX\n!   ...\n")
          )
        ]
      )
    , SubprogramPart(
        ContainsStmt(no-label(), eos("\n   "))
      , [ SubroutineSubprogram(
            SubroutineStmt(no-label(), no-prefix(), "SUB1", no-list(), no-language-binding(), eos("\n      "))
          , initial-spec-part([], [])
          , SpecAndExecPart(
              [ ImplicitStmt(
                  no-label()
                , [ ImplicitSpec(
                      IntrinsicType(INTEGER(no-kind()))
                    , [LetterSpec("A", no-letter()), LetterSpec("C", no-letter())]
                    )
                  ]
                , eos("\n      ")
                )
              , AssignmentStmt(
                  no-label()
                , DataRef([PartRef("C", no-section-subscripts(), no-image-selector())])
                , ComplexLiteralConstant(RealLiteralConstant("0.0", no-kind()), RealLiteralConstant("0.0", no-kind()))
                , eos("! C is host associated and of\n                      ! type complex\n      ")
                )
              , AssignmentStmt(
                  no-label()
                , DataRef([PartRef("Z", no-section-subscripts(), no-image-selector())])
                , RealLiteralConstant("1.0", no-kind())
                , eos("! Z is implicitly declared REAL\n      ")
                )
              , AssignmentStmt(
                  no-label()
                , DataRef([PartRef("A", no-section-subscripts(), no-image-selector())])
                , IntLiteralConstant("2", no-kind())
                , eos("! A is implicitly declared INTEGER\n      ")
                )
              , AssignmentStmt(
                  no-label()
                , DataRef([PartRef("CC", no-section-subscripts(), no-image-selector())])
                , IntLiteralConstant("1", no-kind())
                , eos("! CC is implicitly declared INTEGER\n! ...\n   ")
                )
              ]
            )
          , no-subprogram-part()
          , EndSubroutineStmt(no-label(), "SUB1", eos("\n   "))
          )
        , SubroutineSubprogram(
            SubroutineStmt(no-label(), no-prefix(), "SUB2", no-list(), no-language-binding(), eos("\n      "))
          , initial-spec-part([], [])
          , SpecAndExecPart(
              [ AssignmentStmt(
                  no-label()
                , DataRef([PartRef("Z", no-section-subscripts(), no-image-selector())])
                , RealLiteralConstant("2.0", no-kind())
                , eos("! Z is implicitly declared REAL and\n                      ! is different from the variable of\n                      ! the same name in SUB1\n!      ...\n   ")
                )
              ]
            )
          , no-subprogram-part()
          , EndSubroutineStmt(no-label(), "SUB2", eos("\n   "))
          )
        , SubroutineSubprogram(
            SubroutineStmt(no-label(), no-prefix(), "SUB3", no-list(), no-language-binding(), eos("\n      "))
          , initial-spec-part(
              [UseStmt(no-label(), no-module-nature(), "EXAMPLE_MODULE", no-list(), eos("! Accesses integer function FUN\n                          ! by use association\n      "))]
            , []
            )
          , SpecAndExecPart(
              [ AssignmentStmt(
                  no-label()
                , DataRef([PartRef("Q", no-section-subscripts(), no-image-selector())])
                , FunctionReference(
                    ProcedureDesignator("FUN")
                  , [ActualArgSpec(no-keyword(), DataRef([PartRef("K", no-section-subscripts(), no-image-selector())]))]
                  )
                , eos("! Q is implicitly declared REAL and\n!      ...                ! K is implicitly declared INTEGER\n   ")
                )
              ]
            )
          , no-subprogram-part()
          , EndSubroutineStmt(no-label(), "SUB3", eos("\n"))
          )
        ]
      )
    , EndSubroutineStmt(no-label(), "SUB", eos("\n"))
    )
  ]
)
