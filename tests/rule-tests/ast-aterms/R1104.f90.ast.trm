Program(
  "! Test module\n!      module  is  module-stmt\n!                    [ specification-part ]\n!                    [ module-subprogram-part ]\n!                  end-module-stmt\n!\n!      module-stmt  is  MODULE module-name\n!\n!      end-module-stmt  is  END [ MODULE [ module-name ] ]\n!\n!      module-subprogram-part  is  contains-stmt \n!                                    module-subprogram\n!                                    [ module-subprogram ] ...\n!\n!      module-subprogram  is  function-subprogram \n!                         or  subroutine-subprogram\n!\n! Not tested here: specification-part, function-subprogram, and \n! subroutine-subprogram.\n\n! None of the optional parts included\n"
, [ Module(
      ModuleStmt(no-label(), "a", eos("\n"))
    , SpecificationPart([], [], no-implicit-part(), [])
    , no-module-subprogram-part()
    , EndModuleStmt(no-label(), no-name(), eos("\n\n! Include the optional MODULE in end-module-stmt\n"))
    )
  , Module(
      ModuleStmt(no-label(), "b", eos("\n"))
    , SpecificationPart([], [], no-implicit-part(), [])
    , no-module-subprogram-part()
    , EndModuleStmt(no-label(), no-name(), eos("\n\n! Include optional MODULE and module-name in end-module-stmt.\n"))
    )
  , Module(
      ModuleStmt(no-label(), "c", eos("\n"))
    , SpecificationPart([], [], no-implicit-part(), [])
    , no-module-subprogram-part()
    , EndModuleStmt(no-label(), "c", eos("\n\n! Include an optional specification-part\n"))
    )
  , Module(
      ModuleStmt(no-label(), "d", eos("\n  "))
    , SpecificationPart(
        []
      , []
      , no-implicit-part()
      , [ TypeDeclarationStmt(
            no-label()
          , IntrinsicType(INTEGER())
          , no-list()
          , [EntityDecl("i", no-list(), no-list(), no-char-length(), no-init())]
          , eos("\n")
          )
        ]
      )
    , no-module-subprogram-part()
    , EndModuleStmt(no-label(), "d", eos("\n\n! Include an optional module-subprogram-part\n"))
    )
  , Module(
      ModuleStmt(no-label(), "e", eos("\n"))
    , SpecificationPart([], [], no-implicit-part(), [])
    , ModuleSubprogramPart(
        ContainsStmt(no-label(), eos("\n  "))
      , [ SubroutineSubprogram(
            SubroutineStmt(no-label(), no-prefix(), "sub", no-list(), no-language-binding(), eos("\n  "))
          , InitialSpecPart([], [])
          , SpecAndExecPart([])
          , no-subprogram-part()
          , EndSubroutineStmt(no-label(), "sub", eos("\n  "))
          )
        , FunctionSubprogram(
            FunctionStmt(no-label(), no-prefix(), "foo", [], no-suffix(), eos("\n    "))
          , InitialSpecPart([], [])
          , SpecAndExecPart(
              [ AssignmentStmt(
                  no-label()
                , DataRef([PartRef("foo", no-section-subscripts(), no-image-selector())])
                , IntVal("13")
                , eos("\n  ")
                )
              ]
            )
          , no-subprogram-part()
          , EndFunctionStmt(no-label(), "foo", eos("\n"))
          )
        ]
      )
    , EndModuleStmt(no-label(), "e", eos("\n\n! Include an optional separate-module-subprogram\n"))
    )
  , Module(
      ModuleStmt(no-label(), "f", eos("\n"))
    , SpecificationPart([], [], no-implicit-part(), [])
    , ModuleSubprogramPart(
        ContainsStmt(no-label(), eos("\n  "))
      , [ SeparateModuleSubprogram(
            MpSubprogramStmt(no-label(), "mp", eos("\n  "))
          , InitialSpecPart([], [])
          , SpecAndExecPart([])
          , no-subprogram-part()
          , EndMpSubprogramStmt(no-label(), "mp", eos("\n"))
          )
        ]
      )
    , EndModuleStmt(no-label(), "f", eos("\n\n! Include all optional parts\n"))
    )
  , Module(
      ModuleStmt(no-label(), "g", eos("\n  "))
    , SpecificationPart(
        []
      , []
      , no-implicit-part()
      , [ TypeDeclarationStmt(
            no-label()
          , IntrinsicType(INTEGER())
          , no-list()
          , [EntityDecl("i", no-list(), no-list(), no-char-length(), no-init())]
          , eos("\n")
          )
        ]
      )
    , ModuleSubprogramPart(
        ContainsStmt(no-label(), eos("\n  "))
      , [ SubroutineSubprogram(
            SubroutineStmt(no-label(), no-prefix(), "sub", no-list(), no-language-binding(), eos("\n  "))
          , InitialSpecPart([], [])
          , SpecAndExecPart([])
          , no-subprogram-part()
          , EndSubroutineStmt(no-label(), "sub", eos("\n  "))
          )
        , FunctionSubprogram(
            FunctionStmt(no-label(), no-prefix(), "foo", [], no-suffix(), eos("\n    "))
          , InitialSpecPart([], [])
          , SpecAndExecPart(
              [ AssignmentStmt(
                  no-label()
                , DataRef([PartRef("foo", no-section-subscripts(), no-image-selector())])
                , IntVal("13")
                , eos("\n  ")
                )
              ]
            )
          , no-subprogram-part()
          , EndFunctionStmt(no-label(), "foo", eos("\n  "))
          )
        , SeparateModuleSubprogram(
            MpSubprogramStmt(no-label(), "mp", eos("\n  "))
          , InitialSpecPart([], [])
          , SpecAndExecPart([])
          , no-subprogram-part()
          , EndMpSubprogramStmt(no-label(), "mp", eos("\n"))
          )
        ]
      )
    , EndModuleStmt(no-label(), "g", eos("\n"))
    )
  ]
)
