Program(
  "! Test use-stmt\n!      use-stmt  is  USE [ [, module-nature ] :: ] module-name [, rename-list ]\n!                or  USE [ [, module-nature ] :: ] module-name, \n!                      ONLY : [ only-list ]\n!\n!      module-nature  is  INTRINSIC\n!                     or  NON_INTRINSIC\n!\n!      rename  is  local-name => use-name\n!              or  OPERATOR(local-defined-operator) =>\n!                    OPERATOR(use-defined-operator)\n!\n!      only  is  generic-spec\n!            or  only-use-name\n!            or  rename\n!\n!      only-use-name  is  use-name\n!\n!      local-defined-operator  is  defined-unary-op\n!                              or  defined-binary-op\n!\n!      use-defined-operator  is  defined-unary-op\n!                            or  defined-binary-op\n!\n! Not tested here: generic-spec, only-use-name, local-name, use-name,  \n! defined-binary-op, and defined-unary-op.\n!\n!! modules for subsequent tests\n!\n"
, [ Module(
      ModuleStmt(no-label(), "A", eos("\n  "))
    , SpecificationPart(
        []
      , []
      , no-implicit-part()
      , [ TypeDeclarationStmt(
            no-label()
          , IntrinsicType(INTEGER())
          , no-list()
          , [ EntityDecl("b", no-list(), no-list(), no-char-length(), no-init())
            , EntityDecl("c", no-list(), no-list(), no-char-length(), no-init())
            ]
          , eos("\n  ")
          )
        , DerivedTypeDef(
            DerivedTypeStmt(no-label(), no-list(), "aReal", no-list(), eos("\n    "))
          , []
          , []
          , [ DataComponentDefStmt(
                no-label()
              , IntrinsicType(REAL())
              , no-list()
              , [ComponentDecl("zzz", no-list(), no-list(), no-char-length(), no-init())]
              , eos("\n  ")
              )
            ]
          , no-type-bound-procedure-part()
          , EndTypeStmt(no-label(), no-name(), eos("\n  "))
          )
        , InterfaceBlock(
            InterfaceStmt(no-label(), OPERATOR(".yourop."), eos("\n    "))
          , [ InterfaceBody(
                FunctionStmt(
                  no-label()
                , [IntrinsicType(INTEGER())]
                , "add_op"
                , ["a", "b"]
                , no-suffix()
                , eos("\n      ")
                )
              , SpecificationPart(
                  []
                , []
                , no-implicit-part()
                , [ TypeDeclarationStmt(
                      no-label()
                    , IntrinsicType(INTEGER())
                    , comma-list([Intent(IN())])
                    , [ EntityDecl("a", no-list(), no-list(), no-char-length(), no-init())
                      , EntityDecl("b", no-list(), no-list(), no-char-length(), no-init())
                      ]
                    , eos("\n    ")
                    )
                  ]
                )
              , EndFunctionStmt(no-label(), no-function-name(), eos("\n  "))
              )
            ]
          , EndInterfaceStmt(no-label(), OPERATOR(".yourop."), eos("\n  "))
          )
        , InterfaceBlock(
            InterfaceStmt(no-label(), OPERATOR(".yourotherop."), eos("\n    "))
          , [ InterfaceBody(
                FunctionStmt(
                  no-label()
                , [IntrinsicType(INTEGER())]
                , "neg_op"
                , ["a"]
                , no-suffix()
                , eos("\n      ")
                )
              , SpecificationPart(
                  []
                , []
                , no-implicit-part()
                , [ TypeDeclarationStmt(
                      no-label()
                    , IntrinsicType(INTEGER())
                    , comma-list([Intent(IN())])
                    , [EntityDecl("a", no-list(), no-list(), no-char-length(), no-init())]
                    , eos("\n    ")
                    )
                  ]
                )
              , EndFunctionStmt(no-label(), no-function-name(), eos("\n  "))
              )
            ]
          , EndInterfaceStmt(no-label(), OPERATOR(".yourotherop."), eos("\n"))
          )
        ]
      )
    , no-module-subprogram-part()
    , EndModuleStmt(no-label(), no-module-name(), eos("\n"))
    )
  , Module(
      ModuleStmt(no-label(), "AA", eos("\n  "))
    , SpecificationPart(
        []
      , []
      , no-implicit-part()
      , [ TypeDeclarationStmt(
            no-label()
          , IntrinsicType(INTEGER())
          , no-list()
          , [ EntityDecl("b", no-list(), no-list(), no-char-length(), no-init())
            , EntityDecl("c", no-list(), no-list(), no-char-length(), no-init())
            ]
          , eos("\n")
          )
        ]
      )
    , no-module-subprogram-part()
    , EndModuleStmt(no-label(), no-module-name(), eos("\n"))
    )
  , Module(
      ModuleStmt(no-label(), "AAA", eos("\n  "))
    , SpecificationPart(
        []
      , []
      , no-implicit-part()
      , [ TypeDeclarationStmt(
            no-label()
          , IntrinsicType(INTEGER())
          , no-list()
          , [ EntityDecl("m", no-list(), no-list(), no-char-length(), no-init())
            , EntityDecl("n", no-list(), no-list(), no-char-length(), no-init())
            ]
          , eos("\n")
          )
        ]
      )
    , no-module-subprogram-part()
    , EndModuleStmt(no-label(), no-module-name(), eos("\n\n! Test with none of the optional parts\n"))
    )
  , MainProgram(
      no-program-stmt()
    , initial-spec-part(
        [ UseStmt(no-label(), no-module-nature(), "a", no-list(), eos("\n\n! Include optional module nature\n"))
        , UseStmt(no-label(), ModuleNature(INTRINSIC()), "iso_c_binding", no-list(), eos("\n"))
        , UseStmt(no-label(), ModuleNature(NON_INTRINSIC()), "A", no-list(), eos("\n\n! Include optional rename-list\n"))
        , UseStmt(
            no-label()
          , no-module-nature()
          , "aa"
          , comma-list([Rename("d", "b"), Rename("e", "c")])
          , eos("\n")
          )
        , UseStmt(
            no-label()
          , no-module-nature()
          , "a"
          , comma-list(
              [ RenameOp(".myop.", ".yourop.")
              , Rename("integer", "aReal")
              , Rename("b", "c")
              , RenameOp(".myotherop.", ".yourotherop.")
              ]
            )
          , eos("\n\n! Include optional only clause\n")
          )
        , UseOnlyStmt(
            no-label()
          , no-module-nature()
          , "aaa"
          , OnlyList(["m", Rename("f", "n")])
          , eos("\n\n")
          )
        ]
      , []
      )
    , SpecAndExecPart([])
    , no-subprogram-part()
    , EndProgramStmt(no-label(), no-program-name(), eos("\n"))
    )
  ]
)
