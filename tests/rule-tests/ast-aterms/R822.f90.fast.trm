Program(
  [ MainProgram(
      no-program-stmt()
    , Scope(
        []
      , [ LabelDoStmt(no-label(), no-name(), "10", no-loop-control(), eos("\n   "))
        , AssignmentStmt(no-label(), VarDef("x"), IntVal("1"))
        , EndDoStmt("10", no-name()){Comment("

")}
        , LabelDoStmt(
            no-label()
          , no-name()
          , "10"
          , LoopControl(VarRef("i"), IntVal("1"), IntVal("10"), no-expr())
          , eos("\n   ")
          )
        , AssignmentStmt(no-label(), VarDef("x"), IntVal("1"))
        , EndDoStmt("10", no-name()){Comment("

! Test the loop-control forms
")}
        , BlockDoConstruct(
            NonlabelDoStmt(
              no-label()
            , no-name()
            , LoopControl(VarRef("i"), IntVal("1"), IntVal("10"), no-expr())
            ){Comment("
   ")}
          , [AssignmentStmt(no-label(), VarDef("x"), IntVal("1"))]
          , EndDoStmt(no-label(), no-name()){Comment("

")}
          )
        , BlockDoConstruct(
            NonlabelDoStmt(
              no-label()
            , no-name()
            , LoopControl(
                VarRef("i")
              , IntVal("1")
              , IntVal("10")
              , IntVal("2")
              )
            ){Comment("
   ")}
          , [AssignmentStmt(no-label(), VarDef("x"), IntVal("1"))]
          , EndDoStmt(no-label(), no-name()){Comment("

")}
          )
        , BlockDoConstruct(
            NonlabelDoStmt(
              no-label()
            , no-name()
            , LoopControl(
                VarRef("i")
              , IntVal("1")
              , IntVal("10")
              , IntVal("2")
              )
            ){Comment("
   ")}
          , [AssignmentStmt(no-label(), VarDef("x"), IntVal("1"))]
          , EndDoStmt(no-label(), no-name()){Comment("

")}
          )
        , BlockDoConstruct(
            NonlabelDoStmt(
              no-label()
            , no-name()
            , LoopWhileControl(GT(VarRef("x"), IntVal("2")))
            ){Comment("
   ")}
          , [AssignmentStmt(no-label(), VarDef("i"), IntVal("1"))]
          , EndDoStmt(no-label(), no-name()){Comment("

")}
          )
        , BlockDoConstruct(
            NonlabelDoStmt(
              no-label()
            , no-name()
            , LoopWhileControl(GT(VarRef("x"), IntVal("2")))
            ){Comment("
   ")}
          , [AssignmentStmt(no-label(), VarDef("x"), IntVal("1"))]
          , EndDoStmt(no-label(), no-name()){Comment("

! Test the end-do forms
")}
          )
        , BlockDoConstruct(
            NonlabelDoStmt(
              no-label()
            , no-name()
            , LoopControl(VarRef("i"), IntVal("1"), IntVal("10"), no-expr())
            ){Comment("
   ")}
          , [AssignmentStmt(no-label(), VarDef("x"), IntVal("1"))]
          , EndDoStmt(no-label(), no-name()){Comment("

")}
          )
        , LabelDoStmt(
            no-label()
          , no-name()
          , "10"
          , LoopControl(VarRef("i"), IntVal("1"), IntVal("10"), no-expr())
          , eos("\n   ")
          )
        , AssignmentStmt(no-label(), VarDef("x"), IntVal("1"))
        , ContinueStmt("10"){Comment("

! Test the allowance of a do-construct-name
")}
        , BlockDoConstruct(
            NonlabelDoStmt(
              no-label()
            , "my_do"
            , LoopControl(VarRef("i"), IntVal("1"), IntVal("10"), no-expr())
            ){Comment("
   ")}
          , [AssignmentStmt(no-label(), VarDef("x"), IntVal("2"))]
          , EndDoStmt(no-label(), "my_do"){Comment("

")}
          )
        ]
      , []
      )
    , EndProgramStmt(no-label(), no-program-name())
    )
  ]
){Comment("!! R822 block-do-construct
!      block-do-construct  is  do-stmt
!                                do-block
!                              end-do
!
!      do-stmt  is  label-do-stmt
!               or  nonlabel-do-stmt
!
!      label-do-stmt  is  [ do-construct-name : ] DO label [ loop-control ]
!
!      nonlabel-do-stmt  is  [ do-construct-name : ] DO [ loop-control ]
!
!      loop-control  is  [,] do-variable = scalar-int-expr, scalar-int-expr
!                          [ , scalar-int-expr ]
!                    or  [,] WHILE ( scalar-logical-expr )
!
!      do-variable  is  scalar-int-variable
!
!      do-block  is  block
!
!      end-do  is  end-do-stmt
!              or  continue-stmt
!
!      end-do-stmt  is  END DO [ do-construct-name ]
!
! Tested here: block-do-construct, do-stmt, end-do, label-do-stmt, 
! nonlabel-do-stmt, do-construct-name, loop-control, and end-do-stmt.
! 
! Not tested here: do-block, do-variable, scalar-int-expr, 
! scalar-logical-expr, block, and continue-stmt.

! Test the label and nonlabel stmts
")}
