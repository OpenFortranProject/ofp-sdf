Program(
  "! Test block-data\n!      block-data  is  block-data-stmt\n!                        [ specification-part ]\n!                      end-block-data-stmt\n!\n!      block-data-stmt  is  BLOCK DATA [ block-data-name ]\n!\n!      end-block-data-stmt  is  END [ BLOCK DATA [ block-data-name ] ] \n!\n! Not tested here: specification-part and block-data-name.\n\n! Include just the optional \"BLOCK DATA\" part of end-block-data-stmt\n"
, [ BlockData(
      BlockDataStmt(no-label(), no-name(), eos("\n"))
    , SpecificationPart([], [], no-implicit-part(), [])
    , EndBlockDataStmt(no-label(), no-name(), eos("\n\n! Include the optional block-data-name\n"))
    )
  , BlockData(
      BlockDataStmt(no-label(), "foo", eos("\n"))
    , SpecificationPart([], [], no-implicit-part(), [])
    , EndBlockDataStmt(no-label(), "foo", eos("\n\n! Include the optional specification-part\n"))
    )
  , BlockData(
      BlockDataStmt(no-label(), "bar", eos("\n   "))
    , SpecificationPart(
        []
      , []
      , no-implicit-part()
      , [ TypeDeclarationStmt(
            no-label()
          , IntrinsicType(INTEGER())
          , no-list()
          , [EntityDecl("i", no-list(), no-list(), no-char-length(), no-init())]
          , eos("\n   ")
          )
        , CommonStmt(
            no-label()
          , CommonBlockEntry("mycom", [CommonBlockObject(VarRef("i"), no-list())])
          , []
          , eos("\n   ")
          )
        , DataStmt(
            no-label()
          , DataStmtSet(
              [DataRef([PartRef("i", no-section-subscripts(), no-image-selector())])]
            , [DataStmtValue(no-repeat(), IntVal("13"))]
            )
          , eos("\n")
          )
        ]
      )
    , EndBlockDataStmt(no-label(), "bar", eos("\n"))
    )
  ]
)
