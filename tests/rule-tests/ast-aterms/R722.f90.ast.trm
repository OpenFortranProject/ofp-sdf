Program(
  "!! R722 expr\n!    is [ expr defined-binary-op ] level-5-expr\n"
, [ MainProgram(
      no-program-stmt()
    , initial-spec-part([], [])
    , SpecAndExecPart(
        [ TypeDeclarationStmt(
            no-label()
          , IntrinsicType(CHARACTER(CharSelector(length-selector(IntVal("10")), no-kind())))
          , no-list()
          , [EntityDecl("H", no-list(), no-list(), no-char-length(), no-init())]
          , eos("\n")
          )
        , TypeDeclarationStmt(
            no-label()
          , IntrinsicType(LOGICAL())
          , no-list()
          , [EntityDecl("a", no-list(), no-list(), no-char-length(), no-init())]
          , eos("\n")
          )
        , TypeDeclarationStmt(
            no-label()
          , IntrinsicType(INTEGER())
          , no-list()
          , [EntityDecl("i", no-list(), no-list(), no-char-length(), no-init())]
          , eos("\n")
          )
        , TypeDeclarationStmt(
            no-label()
          , derived-type-spec(DerivedTypeSpec("set", no-list()))
          , no-list()
          , [EntityDecl("s", no-list(), no-list(), no-char-length(), no-init())]
          , eos("\n\n")
          )
        , AssignmentStmt(
            no-label()
          , DataRef([PartRef("s", no-section-subscripts(), no-image-selector())])
          , DefBinExpr(
              Parens(DefBinExpr(IntVal("1"), ".intersect.", IntVal("2")))
            , ".UNION."
            , Parens(Minus(IntVal("3"), IntVal("4")))
            )
          , eos("\n")
          )
        , AssignmentStmt(
            no-label()
          , DataRef([PartRef("a", no-section-subscripts(), no-image-selector())])
          , EQ(
              Plus(IntVal("1"), IntVal("2"))
            , Mult(IntVal("2"), IntVal("4"))
            )
          , eos("\n")
          )
        , AssignmentStmt(
            no-label()
          , DataRef([PartRef("s", no-section-subscripts(), no-image-selector())])
          , DefUnaryExpr(".inverse.", Parens(Plus(IntVal("1"), IntVal("2"))))
          , eos("\n")
          )
        , AssignmentStmt(
            no-label()
          , DataRef([PartRef("a", no-section-subscripts(), no-image-selector())])
          , AND(
              Parens(
                EQ(
                  Parens(Plus(IntVal("1"), IntVal("2")))
                , IntVal("3")
                )
              )
            , Parens(
                EQ(
                  Parens(Mult(IntVal("3"), IntVal("4")))
                , IntVal("12")
                )
              )
            )
          , eos("\n")
          )
        , AssignmentStmt(
            no-label()
          , DataRef([PartRef("a", no-section-subscripts(), no-image-selector())])
          , EQ(
              Concat("\"E\"", "\"G\"")
            , DataRef(
                [ PartRef(
                    "H"
                  , paren-list([Triplet(IntVal("1"), IntVal("10"), no-stride())])
                  , no-image-selector()
                  )
                ]
              )
            )
          , eos("\n")
          )
        , AssignmentStmt(
            no-label()
          , DataRef([PartRef("i", no-section-subscripts(), no-image-selector())])
          , Plus(IntVal("1"), Mult(IntVal("2"), IntVal("3")))
          , eos("\n")
          )
        , AssignmentStmt(
            no-label()
          , DataRef([PartRef("i", no-section-subscripts(), no-image-selector())])
          , Mult(
              Parens(Plus(IntVal("1"), IntVal("2")))
            , IntVal("3")
            )
          , eos("\n\n")
          )
        ]
      )
    , no-subprogram-part()
    , EndProgramStmt(no-label(), no-program-name(), eos("\n"))
    )
  ]
)
