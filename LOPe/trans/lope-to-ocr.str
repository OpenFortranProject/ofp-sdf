module lope-to-ocr

imports
   libstratego-lib
   FAST
   LOPe
   ofp-simplify

signature
  constructors

  ALLOCATED : ALLOCATED
  INTERNAL  : INTERNAL

  clMemObject : symbol -> clMemObject


strategies //=================START OF STRATEGIES============================

  io-lope-to-ocr =
    io-wrap(lope-to-ocr)

  lope-to-ocr =
{ st,lt,save
        :  ?Program(units)
        ;  new-hashtable => st
        ;  new-hashtable => lt
        ;  !Program(units)
        ;  topdown(try(fast-get-symbols(|st)))
        ;  topdown(try(cafe-get-symbols(|st,lt)))
        ;  topdown(try(prog-to-ocr-mod(|st,lt)))
        ;  topdown(try(ocr-convert-stmts))
//        ;  bottomup(try(cafe-add-ocr(|st,lt)))
//        ;  topdown(try(fast-flatten-scope-parts))
        ;  bottomup(try(caf-lower-ast))  => save
        ;  !"--------------------------------------------------------------------------------------"
        ;  debug()
        ;  !save
}


rules //========================START OF RULES===============================

// Local thread group size
// TODO - make dependent on dim and device
opencl-local-size =
     ![IntVal("1"),IntVal("1"),IntVal("1")]

// FAST strategies (MOVE TO fortran/trans)
// ---------------

fast-var-name =
     ?VarRef(name)        ;  !name
 <+  ?VarDef(name)        ;  !name

// Remove excess list elements inside of a Scope
//   - occurs when a single statement is replaced by a list of statements
fast-flatten-scope-parts =
     ?Scope(decls,execs,funcs)
  ;  !Scope(<flatten-list>decls, <flatten-list>execs, <flatten-list>funcs)

fast-allocation-object =
     ?Allocation(object,_,_)
  ;  <fast-var-name> object

// assume literals for now, otherwise get const from symbol table
// TODO - use choice to use lb info
fast-build-allocation-size(|st,obj) =
     ?AllocateShapeSpec(no-lower-bound(),ub)
  ;  !ub

fast-dim-size =
     ?Range(lb,ub)
  ;  !Parens(Minus(ub,lb))
  ;  !Parens(Plus(<id>,"1"))

// Size of a type in bytes
// TODO - add other intrinsic types and support for kinds
// TODO - could replace kind with size in bytes!!!!
fast-type-size =
     ?REAL()              ;  !"4"
 <+  ?INTEGER()           ;  !"4"

fast-mult-op =
     ?(l,r)
  ;  !Mult(l,r)

fast-allocation-size(|st) =
     ?symbol
  ;  <hashtable-get(|symbol)> st
  ;  ?(type,attrs)
  ;  <fetch-elem(?Dimension(shape))> attrs
  ;  <map(fast-dim-size)> shape
  ;  <foldr(!"1",fast-mult-op)> <id>
  ;  <fast-mult-op> (<fast-type-size>type,<id>)

fast-fix-no-lower-bound =
     ?no-lower-bound()
  ;  !"1"

fast-update-allocation-dim =
     ?(Range(lb,ub),Range(_,_))
  ;  !Range(lb,ub)

fast-update-allocation-codim =
     ?(Range(lb,ub),Range(_,_))
  ;  !Range(lb,ub)

// Update the symbol table with information from an allocate statement
fast-update-allocation-symbol(|st) =
{shape,coshape,attrs
  :  topdown(try(fast-fix-no-lower-bound))
  ;  ?Allocation(VarRef(obj),alloc_shape,alloc_coshape)
  ;  <hashtable-get(|obj)> st
  ;  ?(type,decl_attrs)
  ;  <elem> (ALLOCATABLE(),decl_attrs)   // ensure this symbol is allocatable
  ;  <fetch-elem(?Dimension(decl_shape))> decl_attrs
  ;  <fetch-elem(?Codimension(decl_coshape))> decl_attrs
  ;  <zip(fast-update-allocation-dim)>   (alloc_shape,  decl_shape)   =>   shape
  ;  <zip(fast-update-allocation-codim)> (alloc_coshape,decl_coshape) => coshape
  ;  <filter( try(?Dimension(_)   ; !Dimension(shape))     )> decl_attrs
  ;  <filter( try(?Codimension(_) ; !Codimension(coshape)) )> <id>
  ;  <filter( try(?ALLOCATABLE()  ; !ALLOCATED()) )> <id> => attrs
  ;  <hashtable-put(|obj,(type,attrs))> st
}

fast-build-use-stmt =
     ?module_name
  ;  !UseStmt(no-label(), no-module-nature(), module_name, [])

fast-build-type-decl(|type,attrs) =
     ?object_name
  ;  !TypeDeclarationStmt(  no-label()
                          , type
                          , attrs
                          , [Var(object_name,type,no-init())]
                         )

fast-build-block(|decls,execs) =
     !Block(no-label()
          , no-name()
          , Scope(decls,execs,[])
          , EndBlockStmt(no-label(),no-name()))

// Allocate memory on OpenCL device via call to createBuffer()
opencl-build-create-buffer(|st,device) =
     ?obj
  ;  <fast-allocation-size(|st)> obj
  ;  ![  AssignmentStmt(no-label(),VarDef("cl_size__"),<id>)
       , AssignmentStmt(no-label(),<cl-wrap-name> obj
          , FunctionReference("createBuffer"
             , [device,"CL_MEM_READ_WRITE",VarRef("cl_size__")
               ,"C_NULL_PTR"]))
      ]

// Deallocate memory on OpenCL device via call to releaseMemObject()
opencl-build-release-buffer(|st,device) =
    !AssignmentStmt(no-label(),VarDef("cl_status__")
          , FunctionReference("releaseMemObject", [<cl-wrap-var> <id>]))

// Create an OpenCL kernel object via call to createKernel
//TODO - check selector against device to ensure they refer to same image
opencl-build-create-kernel(|ct,device) =
{kernel_arg_funcs
  :  ?obj
  ;  <hashtable-get(|obj)> ct
  ;  ?(kernel,DerivedType("CLKernel",[]),[]) {annotations}
  ;  <lookup> ("args", annotations)
  ;  <map(opencl-build-add-kernel-args(|ct,kernel))> <add-indices> <id>  => kernel_arg_funcs
  ;  !AssignmentStmt(no-label(),kernel
         , FunctionReference("createKernel",[<cl-wrap-name>device,<write-to-string>obj]))
  ;  <flatten-list> [<id>, kernel_arg_funcs]
 <+  ![]
}

// Add an argument to an OpenCL kernel object via call to setKernelArg
opencl-build-add-kernel-args(|ct,kernel) =
     ?(index, PartRef(arg,_,selector))
  ;  <opencl-kernel-arg-type(|ct)> <hashtable-get(|arg)> ct
  ;  !AssignmentStmt(no-label(),VarDef("cl_status__")
         , FunctionReference("setKernelArg"
              ,[kernel,<subti>(index,1),<id>]))
 <+  ![]

opencl-kernel-arg-type(|ct) =
     ?(cl_symbol, DerivedType("CLBuffer",_),_)
  ;  !clMemObject(cl_symbol)


// Utility strategies
// ------------------

cl-wrap-name =
     is-string
  ;  <conc-strings>("cl_", <id>, "_")
 <+  ?VarRef(name)
  ;  debug(!"CL_WRAP_NAME: ERROR isVarRef ------------------------------------------------")
  ;  <conc-strings>("cl_", name, "_")

cl-wrap-var =
     ?VarRef(name) 
  ;  <conc-strings>("cl_", name, "_")
 <+  ?VarDef(name)
  ;  <conc-strings>("cl_", name, "_")
 <+  is-string
  ;  debug(!"CL_WRAP_VAR: ERROR is-string ------------------------------------------------")
  ;  <conc-strings>("cl_", <id>, "_")

ofp-ident
  :  Var(ident,_,_) -> ident

// add subimage device
//
cafe-add-subimage-symbol(|ct,lhs) =
     ?PartRef("get_subimage",args,no-image-selector())
  ;  <hashtable-put(|<fast-var-name>lhs, (<cl-wrap-var>lhs,DerivedType("CLDevice",[]),[]))> ct
  ;  !PartRef("get_subimage",args,no-image-selector())

// Add a symbol to the symbol table
st-add-symbol(|st,type,attrs) =
     ?var
  ;  <hashtable-put(|<ofp-ident>var,(type,attrs))> st

// Add a symbol to the CAFe symbol table
ct-add-symbol(|ct,type,attrs) =
     ?symbol
  ;  <hashtable-put(|symbol,(<cl-wrap-name>symbol,type,attrs))> ct

ct-add-type-decl(|ct) =
     ?ident
  ;  <hashtable-get(|ident)> ct
  ;  ?(clident,type,attrs)
  ;  <fast-build-type-decl(|type,attrs)> clident


// Build symbol table
// ------------------

// Add declared variables to symbol table
fast-get-symbols(|st) =
     ?TypeDeclarationStmt(label,type,attrs,vars)
  ;  <map(st-add-symbol(|st,type,attrs))> vars
  ;  !TypeDeclarationStmt(label,type,attrs,vars)

// Update symbol table with information from allocate statements
fast-get-symbols(|st) =
     ?AllocateStmt(label,type,alloc_list,options)
  ;  <map(fast-update-allocation-symbol(|st))> alloc_list
  ;  !AllocateStmt(label,type,alloc_list,options)


// Get symbols specifically relevant to CAFe
// -----------------------------------------

cafe-get-symbols(|st,ct) =
     ?AssignmentStmt(label,lhs,rhs)
  ;  <cafe-add-subimage-symbol(|ct,lhs)> rhs
  ;  !AssignmentStmt(label,lhs,rhs)

cafe-get-symbols(|st,ct) =
     ?CoAllocateStmt(label,type,alloc_list,options,image,eos)
  ;  <map(ct-add-symbol(|ct,DerivedType("CLBuffer",[]),[]))>
         <map(fast-allocation-object)> alloc_list
  ;  <map(fast-update-allocation-symbol(|st))> alloc_list
  ;  !CoAllocateStmt(label,type,alloc_list,options,image,eos)

// Mark DO CONCURRENT loops having an ImageExecutionSelector
cafe-get-symbols(|st,ct) =
     ?BlockDoConstruct(begin,stmts,end)
  ;  !begin
  ;  ?NonlabelDoStmt(_,_,ConcurrentExecControl(_,image))
  ;  <map(cafe-get-stmt-symbol(|st,ct))> stmts
  ;  !BlockDoConstruct(begin,stmts,end) {[("ImageExecutionSelector",<cafe-subimage>image)]}

// Unmark DO CONCURRENT loop (assumes no embedded do loops)
//cafe-get-symbols(|st,ct) =
//     ?EndDoStmt(label,name)
//  ;  <hashtable-get(|"cafe_do_concurrent_tmp_")> ct
//  ;  <hashtable-remove(|"cafe_do_concurrent_tmp_")> ct
//  ;  !EndDoStmt(label,name)

// Add CONCURRENT subroutine names to CAFe symbols
cafe-get-stmt-symbol(|st,ct) =
     ?CallStmt(label, name, args)
  ;  <hashtable-put(|name,(<cl-wrap-name>name
            , DerivedType("CLKernel",[])
            , []){[("args",args)]})> ct
  ;  !CallStmt(label, name, args)

cafe-subimage =
     ?ImageExecutionSelector([VarRef(device)])
  ;  !device


// Convert Fortran statements to OCR calls
// ---------------------------------------
ocr-convert-stmts =
     ?PrintStmt(label, STAR(), [str, val])
  ;  !CallStmt(label, "printf", [str, val])

// Convert Program to an OCR Module
// --------------------------------

add-edt-decls =
     ?decls
  ;  <concat> [[<fast-build-use-stmt>"ISO_C_BINDING",
                <fast-build-use-stmt>"ocr_interfaces" ], decls]
  ;  <concat> [<id>, [<fast-build-type-decl(|
                          INTEGER(Kind(VarRef("C_INTPTR_T"  ))),[])> "rtn"]]
  ;  <concat> [<id>, [<fast-build-type-decl(|
                          INTEGER(Kind(VarRef("C_INT32_T"  ))),[Intent(IN())])> "paramc"]]
  ;  <concat> [<id>, [TypeDeclarationStmt(no-label()
                        , INTEGER(Kind(VarRef("C_INT64_T")))
                        , [Intent(IN())]
                        , [Var("paramv",
                             ArrayType(INTEGER(Kind(VarRef("c_size_t")))
                                     , [Range(no-lower-bound(), STAR())],[]), no-init())]
                        )]]
  ;  <concat> [<id>, [<fast-build-type-decl(|
                          INTEGER(Kind(VarRef("C_INT32_T"  ))),[Intent(IN())])> "depc"]]
  ; <concat> [<id>, [TypeDeclarationStmt(no-label()
                        , DerivedType("ocrEdtDep_t", [])
                        , [Intent(IN())]
                        , [ Var("depv",
                              ArrayType(DerivedType("ocrEdtDep_t", [])
                                     , [Range(no-lower-bound(), STAR())],[]), no-init())]
                        )]]

append-edt-rtn =
     ?exes
  ;  <concat> [exes, [AssignmentStmt(no-label(),VarDef("rtn"),VarRef("NULL_GUID"))]]

append-ocr-shutdown =
     ?exes
  ;  <concat> [exes, [CallStmt(no-label(),"ocrShutdown",[])]]

append-edt(|name,decls,exes) =
     ?funcs
  ;  !<concat>[funcs,[ Function(
                         FunctionStmt(
                           no-label()
                         , []
                         , name
                         , ["paramc", "paramv", "depc", "depv"]
                         , Result("rtn")
                         , LanguageBinding(BindingName(<concat-strings>["'", name, "'"]))
                         )
                       , Scope(<add-edt-decls>decls, <append-edt-rtn><append-ocr-shutdown>exes, [])
                       , EndFunctionStmt(no-label(), name)
                       )
                     ]
              ]

convert-to-mainEdt =
     ?Scope(decls,exes,funcs)
  ;  !decls
  ;  debug(!"......................\n")
  ;  !Scope([],[],<append-edt(|"mainEdt",decls,exes)>funcs)

// Replace MainProgram with a Module
prog-to-ocr-mod(|st,ct) =
     ?MainProgram(ProgramStmt(label1,name1),
                  Scope(decls,exes,funcs),
                  EndProgramStmt(label2,name2))
  ;  !Module(ModuleStmt(label1, <concat-strings>[name1, "_mod"]),
             <convert-to-mainEdt>Scope(decls,exes,funcs),
             EndModuleStmt(label1, <concat-strings>[name1, "_mod"]))


// Add OCR calls to the AST
// ------------------------------

cafe-add-ocr(|st,ct) =
     ?AssignmentStmt(label,VarDef(lhs),PartRef("get_subimage",[arg],_))
  ;  !AssignmentStmt(label,VarDef(lhs),FunctionReference("get_subimage",
                                      [arg,<cl-wrap-name>lhs]))

// Add variables associated with OCR calls
//    cl_status__, cl_size__, ch_ng__(3)
cafe-add-ocr(|st,ct) =
     ?Scope(decls,execs,funcs)
  ;  <concat> [[<fast-build-use-stmt>"ISO_C_BINDING",
                <fast-build-use-stmt>"ocr-interfaces" ], decls]
  ;  <concat> [<id>, <map(ct-add-type-decl(|ct))> <hashtable-keys()> ct]
  ;  <concat> [<id>, [<fast-build-type-decl(|
                          INTEGER(Kind(VarRef("C_INT32_T"  ))),[])> "paramc"]]
  ;  <concat> [<id>, [TypeDeclarationStmt(no-label()
                        , INTEGER(Kind(VarRef("C_INT64_T")))
                        , []
                        , [Var("paramv",
                             ArrayType(INTEGER(Kind(VarRef("c_size_t")))
                                     , [Range(no-lower-bound(), STAR())],[]), no-init())]
                        )]]
  ;  <concat> [<id>, [<fast-build-type-decl(|
                          INTEGER(Kind(VarRef("C_INT32_T"  ))),[])> "depc"]]
  ; <concat> [<id>, [TypeDeclarationStmt(no-label()
                        , DerivedType("ocrEdtDep_t", [])
                        , []
                        , [ Var("depv",
                              ArrayType(DerivedType("ocrEdtDep_t", [])
                                     , [Range(no-lower-bound(), STAR())],[]), no-init())]
                        )]]
  ;  !Scope(<id>,execs,funcs)

// Replace coallocate statement with function call to alloc memory on device
cafe-add-ocr(|st,ct) =
{device
  :  ?CoAllocateStmt(label,type,alloc_list,options,image,eos)
  ;  <cl-wrap-name> <cafe-subimage> image => device
  ;  <map(ct-add-symbol(|ct,DerivedType("CLBuffer",[]),[]))>
         <map(fast-allocation-object)> alloc_list
  ;  <map(fast-allocation-object)> alloc_list
  ;  <map(opencl-build-create-buffer(|st,device))> <id>
}

// Replace codeallocate statement with function call to free memory on device
cafe-add-ocr(|st,ct) =
{device
  :  ?CoDeallocateStmt(label,dealloc_list,options,image,eos)
  ;  <cl-wrap-name> <cafe-subimage> image => device
  ;  <map(opencl-build-release-buffer(|st,device))> dealloc_list
}

// Replace assignment statements with memory transfer with read/writeBuffer
cafe-add-ocr(|st,ct) =
     ?AssignmentStmt(label,PartRef(var,no-section-subscripts(),[VarRef(device)]),VarRef(obj))
  ;  <fast-allocation-size(|st)> var
  ;  ![  AssignmentStmt(no-label(),VarDef("cl_size__"),<id>)
       , AssignmentStmt(no-label(),VarDef("cl_status__")
         , FunctionReference("writeBuffer"
            ,[<cl-wrap-name>var,<conc-strings>("C_LOC(",obj,")"),VarRef("cl_size__")]))
      ]
 <+  ?AssignmentStmt(label,VarDef(var),PartRef(obj,no-section-subscripts(),[VarRef(device)]))
  ;  <fast-allocation-size(|st)> obj
  ;  ![  AssignmentStmt(no-label(),VarDef("cl_size__"),<id>)
       , AssignmentStmt(no-label(),VarDef("cl_status__")
         , FunctionReference("readBuffer"
            ,[<cl-wrap-name>obj,<conc-strings>("C_LOC(",var,")"),VarRef("cl_size__")]))
      ]

// Create OpenCL kernels and run them; replacing DO CONCURRENT loop
cafe-add-ocr(|st,ct) =
{device,triplets
  :  ?BlockDoConstruct(begin,stmts,end) {annotations}
  ;  <lookup> ("ImageExecutionSelector", annotations)  => device
  ;  <cafe-forall-triplet> begin                       => triplets
  ;  <flatten-list>  <map(opencl-build-create-kernel(|ct,device))> <hashtable-keys> ct
  ;  <concat> [<id>, <map(opencl-build-calc-global-offset)> <add-indices> triplets]
  ;  <concat> [<id>, <map(opencl-build-calc-global-size  )> <add-indices> triplets]
  ;  <concat> [<id>, <map(opencl-replace-call-stmt(|triplets))> stmts]
  ;  <concat> [<id>, <map(opencl-build-finish-kernel)> stmts]
  ;  <flatten-list> <id>
}

// Retrieve list of ForallHeader triplets
cafe-forall-triplet =
     ?NonlabelDoStmt(_,_,ConcurrentExecControl(ForallHeader(_,triplet_list,_),_))
  ;  !triplet_list

// Build AssignmentStmt calculating global offset from a ForallHeader triplet
// TODO - incorporate step information
opencl-build-calc-global-offset =
     ?(index, ForallTripletSpec(var,lb,ub,step))
  ;  !AssignmentStmt(no-label(),PartRef("cl_gwo__",[index],no-image-selector())
         , Minus(lb,1))

// Build AssignmentStmt calculating global size from a ForallHeader triplet
// TODO - incorporate step information
opencl-build-calc-global-size =
     ?(index, ForallTripletSpec(var,lb,ub,step))
  ;  <fast-dim-size> Range(lb,ub)
  ;  !AssignmentStmt(no-label(),PartRef("cl_gws__",[index],no-image-selector()),<id>)

// Replace subroutine call with running the corresponding OpenCL kernel
opencl-replace-call-stmt(|bounds) =
     ?CallStmt(label, name, args)
  ;  !AssignmentStmt(no-label(),VarDef("cl_status__")
               , FunctionReference("run",[<cl-wrap-name>name
                  , <length>bounds, VarRef("cl_gwo__"), VarRef("cl_gws__"), VarRef("cl_lws__")]))

// Build the OpenCL kernel finish call
opencl-build-finish-kernel =
     ?CallStmt(label, name, args)
  ;  !AssignmentStmt(no-label(),VarDef("cl_status__")
         , FunctionReference("clFinish",[<conc-strings>(<cl-wrap-name>name, "%commands")]))


// Lower CAF components to serial
// ------------------------------
caf-lower-ast =
     ?Codimension(_)
  ;  ![]

caf-lower-ast =
     ?EntityDecl(name,array_spec,coarray_spec,char_length,init)
  ;  !EntityDecl(name,array_spec,          [],char_length,init)

// This is just used to flatten the attribute list after removing Codimension attribute
caf-lower-ast =
     ?TypeDeclarationStmt(label,type,attrs,vars)
  ;  !TypeDeclarationStmt(label,type,<flatten-list>attrs,vars)

caf-lower-ast =
     ?Allocation(var,shape,coshape)
  ;  !Allocation(var,shape,     [])
