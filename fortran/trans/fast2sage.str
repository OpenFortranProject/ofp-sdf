module fast2sage

imports
   libstratego-lib
   FAST
   SgUntyped

signature
  constructors

    no-label                  : NoLabel         // R312
    no-program-stmt           : NoProgramStmt   // R1102

    NULL_EXPR                 : NULL_EXPR

    // SgToken:ROSE_Fortran_Keywords
    //
    SgToken_ROSE_Fortran_Keywords  :  enum  -> SgToken_ROSE_Fortran_Keywords

    FORTRAN_ABSTRACT          : FORTRAN_ABSTRACT
    FORTRAN_ACCESS            : FORTRAN_ACCESS
    FORTRAN_ACTION            : FORTRAN_ACTION
    FORTRAN_ALLOCATE          : FORTRAN_ALLOCATE
    FORTRAN_ALLOCATABLE       : FORTRAN_ALLOCATABLE
    FORTRAN_ASSIGN            : FORTRAN_ASSIGN
    FORTRAN_ASSOCIATE         : FORTRAN_ASSOCIATE
    FORTRAN_ASYNCHRONOUS      : FORTRAN_ASYNCHRONOUS
    FORTRAN_BACKSPACE         : FORTRAN_BACKSPACE
    FORTRAN_BIND              : FORTRAN_BIND
    FORTRAN_BLANK             : FORTRAN_BLANK

    FORTRAN_BLOCK             : FORTRAN_BLOCK        // TODO: add to ROSE

    FORTRAN_BLOCK_DATA        : FORTRAN_BLOCK_DATA
    FORTRAN_CALL              : FORTRAN_CALL
    FORTRAN_CHARACTER         : FORTRAN_CHARACTER
    FORTRAN_CLASS             : FORTRAN_CLASS
    FORTRAN_CLOSE             : FORTRAN_CLOSE
    FORTRAN_CONTINUE          : FORTRAN_CONTINUE
    FORTRAN_CYCLE             : FORTRAN_CYCLE
    FORTRAN_CASE              : FORTRAN_CASE
    FORTRAN_COMMON            : FORTRAN_COMMON
    FORTRAN_COMPLEX           : FORTRAN_COMPLEX
    FORTRAN_CONTAINS          : FORTRAN_CONTAINS
    FORTRAN_DEALLOCATE        : FORTRAN_DEALLOCATE
    FORTRAN_DATA              : FORTRAN_DATA
    FORTRAN_DEFERRED          : FORTRAN_DEFERRED
    FORTRAN_DELIM             : FORTRAN_DELIM
    FORTRAN_DIMENSION         : FORTRAN_DIMENSION
    FORTRAN_DO                : FORTRAN_DO
    FORTRAN_DT                : FORTRAN_DT
    FORTRAN_DOUBLEPRECISION   : FORTRAN_DOUBLEPRECISION
    FORTRAN_ENCODING          : FORTRAN_ENCODING
    FORTRAN_END_CASE          : FORTRAN_END_CASE
    FORTRAN_ENDDO             : FORTRAN_ENDDO
    FORTRAN_END_FILE          : FORTRAN_END_FILE
    FORTRAN_END_ENUM          : FORTRAN_END_ENUM
    FORTRAN_END_INTERFACE     : FORTRAN_END_INTERFACE
    FORTRAN_END_TYPE          : FORTRAN_END_TYPE
    FORTRAN_ERR               : FORTRAN_ERR
    FORTRAN_ERRMSG            : FORTRAN_ERRMSG
    FORTRAN_EXIT              : FORTRAN_EXIT
    FORTRAN_ELSE              : FORTRAN_ELSE
    FORTRAN_ELSEWHERE         : FORTRAN_ELSEWHERE
    FORTRAN_ELSEIF            : FORTRAN_ELSEIF
    FORTRAN_ENDIF             : FORTRAN_ENDIF
    FORTRAN_ENTRY             : FORTRAN_ENTRY
    FORTRAN_END               : FORTRAN_END
    FORTRAN_ENUM              : FORTRAN_ENUM
    FORTRAN_ENUMERATOR        : FORTRAN_ENUMERATOR
    FORTRAN_EQUIVALENCE       : FORTRAN_EQUIVALENCE
    FORTRAN_EXTERNAL          : FORTRAN_EXTERNAL
    FORTRAN_EXTENDS           : FORTRAN_EXTENDS
    FORTRAN_FILE              : FORTRAN_FILE
    FORTRAN_FINAL             : FORTRAN_FINAL
    FORTRAN_FMT               : FORTRAN_FMT
    FORTRAN_FORALL            : FORTRAN_FORALL
    FORTRAN_FORM              : FORTRAN_FORM
    FORTRAN_FORMATTED         : FORTRAN_FORMATTED
    FORTRAN_FORMAT            : FORTRAN_FORMAT
    FORTRAN_FLUSH             : FORTRAN_FLUSH
    FORTRAN_FUNCTION          : FORTRAN_FUNCTION
    FORTRAN_GENERIC           : FORTRAN_GENERIC
    FORTRAN_GOTO              : FORTRAN_GOTO
    FORTRAN_ID                : FORTRAN_ID
    FORTRAN_IF                : FORTRAN_IF
    FORTRAN_INQUIRE           : FORTRAN_INQUIRE
    FORTRAN_INTEGER           : FORTRAN_INTEGER
    FORTRAN_IOMSG             : FORTRAN_IOMSG
    FORTRAN_IOSTAT            : FORTRAN_IOSTAT
    FORTRAN_IMPLICIT          : FORTRAN_IMPLICIT
    FORTRAN_IMPLICIT_NONE     : FORTRAN_IMPLICIT_NONE
    FORTRAN_IMPORT            : FORTRAN_IMPORT
    FORTRAN_INTERFACE         : FORTRAN_INTERFACE
    FORTRAN_INTENT            : FORTRAN_INTENT
    FORTRAN_INTRINSIC         : FORTRAN_INTRINSIC
    FORTRAN_LEN               : FORTRAN_LEN
    FORTRAN_LOGICAL           : FORTRAN_LOGICAL
    FORTRAN_KIND              : FORTRAN_KIND
    FORTRAN_MODULE_PROC       : FORTRAN_MODULE_PROC
    FORTRAN_MODULE            : FORTRAN_MODULE
    FORTRAN_NON_INTRINSIC     : FORTRAN_NON_INTRINSIC
    FORTRAN_NON_OVERRIDABLE   : FORTRAN_NON_OVERRIDABLE
    FORTRAN_NULL              : FORTRAN_NULL
    FORTRAN_NULLIFY           : FORTRAN_NULLIFY
    FORTRAN_NAMELIST          : FORTRAN_NAMELIST
    FORTRAN_NML               : FORTRAN_NML
    FORTRAN_NONE              : FORTRAN_NONE
    FORTRAN_NOPASS            : FORTRAN_NOPASS
    FORTRAN_ONLY              : FORTRAN_ONLY
    FORTRAN_OPEN              : FORTRAN_OPEN
    FORTRAN_OPTIONAL          : FORTRAN_OPTIONAL
    FORTRAN_PARAMETER         : FORTRAN_PARAMETER
    FORTRAN_PASS              : FORTRAN_PASS
    FORTRAN_PAUSE             : FORTRAN_PAUSE
    FORTRAN_POINTER           : FORTRAN_POINTER
    FORTRAN_PRINT             : FORTRAN_PRINT
    FORTRAN_PRIVATE           : FORTRAN_PRIVATE
    FORTRAN_PROCEDURE         : FORTRAN_PROCEDURE
    FORTRAN_PROGRAM           : FORTRAN_PROGRAM
    FORTRAN_PROTECTED         : FORTRAN_PROTECTED
    FORTRAN_READ              : FORTRAN_READ
    FORTRAN_REAL              : FORTRAN_REAL
    FORTRAN_RETURN            : FORTRAN_RETURN
    FORTRAN_REWIND            : FORTRAN_REWIND
    FORTRAN_ROUND             : FORTRAN_ROUND
    FORTRAN_SELECTCASE        : FORTRAN_SELECTCASE
    FORTRAN_SELECTTYPE        : FORTRAN_SELECTTYPE
    FORTRAN_SEQUENCE          : FORTRAN_SEQUENCE
    FORTRAN_SAVE              : FORTRAN_SAVE
    FORTRAN_SIGN              : FORTRAN_SIGN
    FORTRAN_SIZE              : FORTRAN_SIZE
    FORTRAN_SOURCE            : FORTRAN_SOURCE
    FORTRAN_STAT              : FORTRAN_STAT
    FORTRAN_STOP              : FORTRAN_STOP
    FORTRAN_SUBROUTINE        : FORTRAN_SUBROUTINE
    FORTRAN_TARGET            : FORTRAN_TARGET
    FORTRAN_THEN              : FORTRAN_THEN
    FORTRAN_DERIVED_DECL      : FORTRAN_DERIVED_DECL
    FORTRAN_TYPEIS            : FORTRAN_TYPEIS
    FORTRAN_UNFORMATTED       : FORTRAN_UNFORMATTED
    FORTRAN_UNIT              : FORTRAN_UNIT
    FORTRAN_USE               : FORTRAN_USE
    FORTRAN_VALUE             : FORTRAN_VALUE
    FORTRAN_VOLATILE          : FORTRAN_VOLATILE
    FORTRAN_WAIT              : FORTRAN_WAIT
    FORTRAN_WHERE             : FORTRAN_WHERE
    FORTRAN_WRITE             : FORTRAN_WRITE
    FORTRAN_END_PROGRAM       : FORTRAN_END_PROGRAM
    FORTRAN_END_FUNCTION      : FORTRAN_END_FUNCTION
    FORTRAN_END_SUBROUTINE    : FORTRAN_END_SUBROUTINE
    FORTRAN_END_MODULE        : FORTRAN_END_MODULE

    FORTRAN_END_BLOCK         : FORTRAN_END_BLOCK       // TODO: add to ROSE

    FORTRAN_DOUBLE_COMPLEX    : FORTRAN_DOUBLE_COMPLEX
    FORTRAN_TYPE              : FORTRAN_TYPE
    FORTRAN_UNKNOWN           : FORTRAN_UNKNOWN

    // SgToken:ROSE_Fortran_Operators
    //
    SgToken_ROSE_Fortran_Operators  :  enum  -> SgToken_ROSE_Fortran_Operators

    FORTRAN_INTRINSIC_PLUS    : FORTRAN_INTRINSIC_PLUS
    FORTRAN_INTRINSIC_MINUS   : FORTRAN_INTRINSIC_MINUS
    FORTRAN_INTRINSIC_POWER   : FORTRAN_INTRINSIC_POWER
    FORTRAN_INTRINSIC_CONCAT  : FORTRAN_INTRINSIC_CONCAT
    FORTRAN_INTRINSIC_TIMES   : FORTRAN_INTRINSIC_TIMES
    FORTRAN_INTRINSIC_DIVIDE  : FORTRAN_INTRINSIC_DIVIDE
    FORTRAN_INTRINSIC_AND     : FORTRAN_INTRINSIC_AND
    FORTRAN_INTRINSIC_OR      : FORTRAN_INTRINSIC_OR
    FORTRAN_INTRINSIC_EQV     : FORTRAN_INTRINSIC_EQV
    FORTRAN_INTRINSIC_NEQV    : FORTRAN_INTRINSIC_NEQV
    FORTRAN_INTRINSIC_EQ      : FORTRAN_INTRINSIC_EQ
    FORTRAN_INTRINSIC_NE      : FORTRAN_INTRINSIC_NE
    FORTRAN_INTRINSIC_GE      : FORTRAN_INTRINSIC_GE
    FORTRAN_INTRINSIC_LE      : FORTRAN_INTRINSIC_LE
    FORTRAN_INTRINSIC_LT      : FORTRAN_INTRINSIC_LT
    FORTRAN_INTRINSIC_GT      : FORTRAN_INTRINSIC_GT
    FORTRAN_INTRINSIC_NOT     : FORTRAN_INTRINSIC_NOT

    // SgUntypedType:type_enum
    //
    TYPE_UNKNOWN              : TYPE_UNKNOWN
    TYPE_VOID                 : TYPE_VOID
    TYPE_INT                  : TYPE_INT
    TYPE_FLOAT                : TYPE_FLOAT
    TYPE_DOUBLE               : TYPE_DOUBLE
    TYPE_COMPLEX              : TYPE_COMPLEX
    TYPE_DOUBLE_COMPLEX       : TYPE_DOUBLE_COMPLEX
    TYPE_BOOL                 : TYPE_BOOL
    TYPE_CHAR                 : TYPE_CHAR
    TYPE_LAST                 : TYPE_LAST

    SgUntypedType             :  string * expr * bool * bool * bool * bool * bool * bool * expr * string * bool * enum -> SgUntypedType
    SgUntypedType_type_enum   :  enum -> SgUntypedType_type_enum

    SgUntypedExpression       :  enum -> SgUntypedExpression

strategies

  main =
    io-wrap(fast2sage)

  fast2sage =
      innermost(no-to-string)
    ; innermost(fast-to-sage)

rules

sg-initialized-name: name -> SgUntypedInitializedName(SgUntypedType("unknown"),name)

sg-expression =
     ? NULL_EXPR()                     ; ! SgUntypedExpression(<sg-fortran-keyword>FORTRAN_NULL())

sg-fortran-keyword =
     ? FORTRAN_CONTINUE()              ; ! SgToken_ROSE_Fortran_Keywords(16)
  <+ ? FORTRAN_FUNCTION()              ; ! SgToken_ROSE_Fortran_Keywords(59)
  <+ ? FORTRAN_IMPLICIT()              ; ! SgToken_ROSE_Fortran_Keywords(68)
  <+ ? FORTRAN_MODULE()                ; ! SgToken_ROSE_Fortran_Keywords(78)
  <+ ? FORTRAN_NULL()                  ; ! SgToken_ROSE_Fortran_Keywords(81)
  <+ ? FORTRAN_PROGRAM()               ; ! SgToken_ROSE_Fortran_Keywords(97)
  <+ ? FORTRAN_SUBROUTINE()            ; ! SgToken_ROSE_Fortran_Keywords(113)
  <+ ? FORTRAN_END_PROGRAM()           ; ! SgToken_ROSE_Fortran_Keywords(126)
  <+ ? FORTRAN_END_MODULE()            ; ! SgToken_ROSE_Fortran_Keywords(127)
  <+ ? FORTRAN_END_FUNCTION()          ; ! SgToken_ROSE_Fortran_Keywords(128)
  <+ ? FORTRAN_END_SUBROUTINE()        ; ! SgToken_ROSE_Fortran_Keywords(129)
  <+ ? FORTRAN_UNKNOWN()               ; ! SgToken_ROSE_Fortran_Keywords(132)
  <+ ? FORTRAN_BLOCK()                 ; ! SgToken_ROSE_Fortran_Keywords(132)        // TODO: add to ROSE
  <+ ? FORTRAN_END_BLOCK()             ; ! SgToken_ROSE_Fortran_Keywords(132)        // TODO: add to ROSE

sg-fortran-operator =
     ? FORTRAN_INTRINSIC_PLUS()        ; ! SgToken_ROSE_Fortran_Operators(10000)
  <+ ? FORTRAN_INTRINSIC_MINUS()       ; ! SgToken_ROSE_Fortran_Operators(10001)
  <+ ? FORTRAN_INTRINSIC_POWER()       ; ! SgToken_ROSE_Fortran_Operators(10002)
  <+ ? FORTRAN_INTRINSIC_CONCAT()      ; ! SgToken_ROSE_Fortran_Operators(10003)
  <+ ? FORTRAN_INTRINSIC_TIMES()       ; ! SgToken_ROSE_Fortran_Operators(10004)
  <+ ? FORTRAN_INTRINSIC_DIVIDE()      ; ! SgToken_ROSE_Fortran_Operators(10005)
  <+ ? FORTRAN_INTRINSIC_AND()         ; ! SgToken_ROSE_Fortran_Operators(10006)
  <+ ? FORTRAN_INTRINSIC_OR()          ; ! SgToken_ROSE_Fortran_Operators(10007)
  <+ ? FORTRAN_INTRINSIC_EQV()         ; ! SgToken_ROSE_Fortran_Operators(10008)
  <+ ? FORTRAN_INTRINSIC_NEQV()        ; ! SgToken_ROSE_Fortran_Operators(10009)
  <+ ? FORTRAN_INTRINSIC_EQ()          ; ! SgToken_ROSE_Fortran_Operators(10010)
  <+ ? FORTRAN_INTRINSIC_NE()          ; ! SgToken_ROSE_Fortran_Operators(10011)
  <+ ? FORTRAN_INTRINSIC_GE()          ; ! SgToken_ROSE_Fortran_Operators(10012)
  <+ ? FORTRAN_INTRINSIC_LE()          ; ! SgToken_ROSE_Fortran_Operators(10013)
  <+ ? FORTRAN_INTRINSIC_LT()          ; ! SgToken_ROSE_Fortran_Operators(10014)
  <+ ? FORTRAN_INTRINSIC_GT()          ; ! SgToken_ROSE_Fortran_Operators(10015)
  <+ ? FORTRAN_INTRINSIC_NOT()         ; ! SgToken_ROSE_Fortran_Operators(10016)

//  e_unknown=0,e_void,e_int,e_float,e_double,e_complex,e_double_complex,e_bool,e_char,e_last
sg-type-enum =
     ? TYPE_UNKNOWN()                  ; ! SgUntypedType_type_enum(0)
  <+ ? TYPE_VOID()                     ; ! SgUntypedType_type_enum(1)
  <+ ? TYPE_INT()                      ; ! SgUntypedType_type_enum(2)
  <+ ? TYPE_FLOAT()                    ; ! SgUntypedType_type_enum(3)
  <+ ? TYPE_DOUBLE()                   ; ! SgUntypedType_type_enum(4)
  <+ ? TYPE_COMPLEX()                  ; ! SgUntypedType_type_enum(5)
  <+ ? TYPE_DOUBLE_COMPLEX()           ; ! SgUntypedType_type_enum(6)
  <+ ? TYPE_BOOL()                     ; ! SgUntypedType_type_enum(7)
  <+ ? TYPE_CHAR()                     ; ! SgUntypedType_type_enum(8)

sg-build-void-type =                     ! SgUntypedType("void",<sg-expression>NULL_EXPR(),0,0,0,
                                                          1,0,0,<sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_VOID())

sg-build-intrinsic-type =
     ? INTEGER()                       ; ! SgUntypedType("integer",<sg-expression>NULL_EXPR(),0,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_INT())
  <+ ? REAL()                          ; ! SgUntypedType("float",  <sg-expression>NULL_EXPR(),0,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_FLOAT())
  <+ ? DOUBLEPRECISION()               ; ! SgUntypedType("double", <sg-expression>NULL_EXPR(),0,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_DOUBLE())
  <+ ? COMPLEX()                       ; ! SgUntypedType("complex",<sg-expression>NULL_EXPR(),0,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_COMPLEX())
  <+ ? DOUBLECOMPLEX()                 ; ! SgUntypedType("double_complex",<sg-expression>NULL_EXPR(),0,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_DOUBLE_COMPLEX())
  <+ ? LOGICAL()                       ; ! SgUntypedType("bool",   <sg-expression>NULL_EXPR(),0,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_BOOL())
  <+ ? CHARACTER()                     ; ! SgUntypedType("char",   <sg-expression>NULL_EXPR(),0,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_CHAR())

sg-build-intrinsic-type(|kind) =
     ? INTEGER()                       ; ! SgUntypedType("integer",                      kind,1,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_INT())
  <+ ? REAL()                          ; ! SgUntypedType("float",                        kind,1,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_FLOAT())
  <+ ? COMPLEX()                       ; ! SgUntypedType("complex",                      kind,1,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_COMPLEX())
  <+ ? LOGICAL()                       ; ! SgUntypedType("bool",                         kind,1,0,0,
                                                          1,0,0,   <sg-expression>NULL_EXPR(),"",0,<sg-type-enum>TYPE_BOOL())
  <+ ? CHARACTER()                     ; ! SgUntypedType("char",   <sg-expression>NULL_EXPR(),0,0,0,
                                                          1,0,0,                         kind,"",1,<sg-type-enum>TYPE_CHAR()) /* kind actually length here */

//R201
fast-to-sage:  Program(units)
               -> SgUntypedFile(SgUntypedGlobalScope("",<sg-fortran-keyword>FORTRAN_UNKNOWN(),
                                                        SgUntypedDeclarationStatementList([]),
                                                        SgUntypedStatementList([]),
                                                        SgUntypedFunctionDeclarationList(units)))

//R404
fast-to-sage:  INTEGER()              -> <sg-build-intrinsic-type>        INTEGER()
fast-to-sage:  INTEGER(kind)          -> <sg-build-intrinsic-type(|kind)> INTEGER()

fast-to-sage:  REAL()                 -> <sg-build-intrinsic-type>        REAL()
fast-to-sage:  REAL(kind)             -> <sg-build-intrinsic-type(|kind)> REAL()

fast-to-sage:  DOUBLEPRECISION()      -> <sg-build-intrinsic-type>        DOUBLEPRECISION()

fast-to-sage:  COMPLEX()              -> <sg-build-intrinsic-type>        COMPLEX()
fast-to-sage:  COMPLEX(kind)          -> <sg-build-intrinsic-type(|kind)> COMPLEX()

fast-to-sage:  DOUBLECOMPLEX()        -> <sg-build-intrinsic-type>        DOUBLECOMPLEX()

fast-to-sage:  LOGICAL()              -> <sg-build-intrinsic-type>        LOGICAL()
fast-to-sage:  LOGICAL(kind)          -> <sg-build-intrinsic-type(|kind)> LOGICAL()

fast-to-sage:  CHARACTER()            -> <sg-build-intrinsic-type>        CHARACTER()
fast-to-sage:  CHARACTER(len)         -> <sg-build-intrinsic-type(|len)>  CHARACTER()

//R407
fast-to-sage:  IntVal(val)
               -> SgUntypedValueExpression(<sg-fortran-keyword>FORTRAN_UNKNOWN(),val,<sg-build-intrinsic-type>INTEGER())
fast-to-sage:  IntVal(val,expr)
               -> SgUntypedValueExpression(<sg-fortran-keyword>FORTRAN_UNKNOWN(),val,<sg-build-intrinsic-type(|expr)>INTEGER())

//R413
fast-to-sage:  RealVal(val)
               -> SgUntypedValueExpression(<sg-fortran-keyword>FORTRAN_UNKNOWN(),val,<sg-build-intrinsic-type>REAL())
fast-to-sage:  RealVal(val,expr)
               -> SgUntypedValueExpression(<sg-fortran-keyword>FORTRAN_UNKNOWN(),val,<sg-build-intrinsic-type(|expr)>REAL())


//R501
fast-to-sage:  TypeDeclarationStmt(label,type,attrs,entities)
               -> SgUntypedVariableDeclaration(label,<sg-fortran-keyword>FORTRAN_UNKNOWN(),type,
                                               SgUntypedInitializedNameList(entities))

//R503
fast-to-sage:  Var(name,type,init)           -> SgUntypedInitializedName(type,name)

//R510
//  fast-to-sage:
//    DimSpec(no-lower-bound(), upper)       -> PpDimSpec(upper)
//  fast-to-sage:
//    DimSpec(lower, upper)                  -> PpDimSpec(lower, upper)

//R560 - TODO: implicit-spec-list
fast-to-sage:  ImplicitStmt(label,list)  -> SgUntypedImplicitDeclaration (label,<sg-fortran-keyword>FORTRAN_IMPLICIT())

//R562
//  fast-to-sage:  LetterSpec(s1,no-letter())   -> PpLetterSpec(s1)
//  fast-to-sage:  LetterSpec(s1,s2)            -> PpLetterSpec(s1,s2)

//R631
//  fast-to-sage:  Allocation(part,[],[])                 -> PpAllocation(part)
//  fast-to-sage:  Allocation(part,shape,[])              -> PpAllocationShape(part,shape)
//  fast-to-sage:  Allocation(part,[],coshape)            -> PpAllocationCoshape(part,coshape)

//R633
//  fast-to-sage:  AllocateShapeSpec(no-lower-bound(),ub) -> PpAllocShapeSpec(ub)
//  fast-to-sage:  AllocateShapeSpec(lb,ub)               -> PpAllocShapeSpec(lb,ub)

//R637
//  fast-to-sage:  AllocateCoshapeSpec(no-lower-bound(),ub) -> PpAllocCoshapeSpec(ub)
//  fast-to-sage:  AllocateCoshapeSpec(lb,ub)               -> PpAllocCoshapeSpec(lb,ub)

fast-to-sage:  VarDef(name) -> SgUntypedReferenceExpression (<sg-fortran-keyword>FORTRAN_UNKNOWN(),name)
fast-to-sage:  VarRef(name) -> SgUntypedReferenceExpression (<sg-fortran-keyword>FORTRAN_UNKNOWN(),name)

// Unary Operators
//
fast-to-sage:
  UnaryPlus(expr)  -> SgUntypedUnaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_PLUS(),"+",expr)
fast-to-sage:
  UnaryMinus(expr) -> SgUntypedUnaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_MINUS(),"-",expr)
fast-to-sage:
  NOT(expr)        -> SgUntypedUnaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_NOT(),".NOT.",expr)

// Binary Operators
//
fast-to-sage:
  Power(e1,e2)  -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_POWER(),"**",e1,e2)

fast-to-sage:
  Mult(e1,e2)   -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_TIMES(), "*",e1,e2)
fast-to-sage:
  Div(e1,e2)    -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_DIVIDE(),"/",e1,e2)

fast-to-sage:
  Plus(e1,e2)   -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_PLUS(), "+",e1,e2)
fast-to-sage:
  Minus(e1,e2)  -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_MINUS(),"-",e1,e2)

fast-to-sage:
  Concat(e1,e2) -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_CONCAT(),"//",e1,e2)

fast-to-sage:
  EQ(e1,e2)     -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_EQ(),"==",e1,e2)
fast-to-sage:
  NE(e1,e2)     -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_NE(),"/=",e1,e2)
fast-to-sage:
  LT(e1,e2)     -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_LT(),"<",e1,e2)
fast-to-sage:
  LE(e1,e2)     -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_LE(),"<=",e1,e2)
fast-to-sage:
  GT(e1,e2)     -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_GT(),">",e1,e2)
fast-to-sage:
  GE(e1,e2)     -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_GE(),">=",e1,e2)

fast-to-sage:
  AND(e1,e2)    -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_AND(),".AND.",e1,e2)
fast-to-sage:
  OR(e1,e2)     -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_OR(), ".OR.", e1,e2)

fast-to-sage:
  EQV(e1,e2)    -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_EQV(), ".EQV.", e1,e2)
fast-to-sage:
  NEQV(e1,e2)   -> SgUntypedBinaryOperator(<sg-fortran-keyword>FORTRAN_UNKNOWN(),<sg-fortran-operator>FORTRAN_INTRINSIC_NEQV(),".NEQV.",e1,e2)

fast-to-sage:
  Parens(expr)  -> expr

//R732
fast-to-sage:
  AssignmentStmt(label,var,expr)    -> SgUntypedAssignmentStatement(label,<sg-fortran-keyword>FORTRAN_UNKNOWN(),var,expr)

//R803
//  fast-to-sage:
//    AssociateStmt(label,name,list,eos) -> PpAssociateStmt(label,<append-colon>name,list,eos)

//R807
fast-to-sage =
{l1,l2,l3
  :  ?Block(label,name,Scope(l1,l2,l3),end)
  ;  !SgUntypedBlockStatement(label,
                              <sg-fortran-keyword>FORTRAN_BLOCK(),
                              name,
                              SgUntypedScope(label,<sg-fortran-keyword>FORTRAN_BLOCK(),
                                                   SgUntypedDeclarationStatementList(l1),
                                                   SgUntypedStatementList(l2),
                                                   SgUntypedFunctionDeclarationList(l3)),
                              end)
}

//R809
fast-to-sage:
  EndBlockStmt(label,name) -> SgUntypedNamedStatement(label,<sg-fortran-keyword>FORTRAN_END_BLOCK(),name)

//R817
//  fast-to-sage:
//    NonlabelDoStmt(label,name,loopcontrol,eos) -> PpNonlabelDoStmt(label,<append-colon>name,loopcontrol,eos)

//R838
//  fast-to-sage:
//    SelectCaseStmt(label,name,expr,eos)    -> PpSelectCaseStmt(label,<append-colon>name,expr,eos)

//R847
//  fast-to-sage:
//    SelectTypeStmt(label,name,name,selector,eos) -> PpSelectTypeStmt(label,<append-colon>name,name,selector,eos)

//R854
fast-to-sage:
  ContinueStmt(label)               -> SgUntypedOtherStatement(label,<sg-fortran-keyword>FORTRAN_CONTINUE())

//R860
//  fast-to-sage:
//    SyncImagesStmt(label,set,list,eos)     -> SyncImagesStmt(label,set,<pp-opt-list>(list))

//R1101
fast-to-sage =
{l1,l2,l3
  :  ?MainProgram(no-program-stmt(),Scope(l1,l2,l3),end)
  ;  !SgUntypedProgramHeaderDeclaration("",
                                        <sg-fortran-keyword>FORTRAN_PROGRAM(),
                                        "",
                                        SgUntypedInitializedNameList([]),
                                        <sg-build-void-type>,
                                        SgUntypedFunctionScope("",<sg-fortran-keyword>FORTRAN_PROGRAM(),
                                        SgUntypedDeclarationStatementList(l1),
                                        SgUntypedStatementList(l2),
                                        SgUntypedFunctionDeclarationList(l3)),
                                        end)
 <+  ?MainProgram(ProgramStmt(label,name),Scope(l1,l2,l3),end)
  ;  !SgUntypedProgramHeaderDeclaration(label,
                                        <sg-fortran-keyword>FORTRAN_PROGRAM(),
                                        name,
                                        SgUntypedInitializedNameList([]),
                                        <sg-build-void-type>,
                                        SgUntypedFunctionScope(label,<sg-fortran-keyword>FORTRAN_PROGRAM(),
                                                               SgUntypedDeclarationStatementList(l1),
                                                               SgUntypedStatementList(l2),
                                                               SgUntypedFunctionDeclarationList(l3)),
                                        end)
}

//R1102
//  fast-to-sage: no-program-stmt()           -> ProgramStmt("", "")

//R1103
fast-to-sage:
  EndProgramStmt(label,name) -> SgUntypedNamedStatement(label,<sg-fortran-keyword>FORTRAN_END_PROGRAM(),name)

//R1104
fast-to-sage =
{l1,l2,l3
  :  ?Module(ModuleStmt(label,name),Scope(l1,l2,l3),end)
  ;  !SgUntypedModuleDeclaration(label,
                                 <sg-fortran-keyword>FORTRAN_MODULE(),
                                 name,
                                 SgUntypedModuleScope(label,<sg-fortran-keyword>FORTRAN_MODULE(),
                                                      SgUntypedDeclarationStatementList(l1),
                                                      SgUntypedStatementList(l2),
                                                      SgUntypedFunctionDeclarationList(l3)),
                                 end)
}

//R1104
fast-to-sage:  EndModuleStmt(label,name) -> SgUntypedNamedStatement(label,<sg-fortran-keyword>FORTRAN_END_MODULE(),name)

//R1222
//  fast-to-sage:  ActualArgSpec(keyword, arg)  -> PpActualArgSpec(PpKeyword(keyword), arg)

//R1227 - TODO: need SgUntypedFunctionDeclaration constructor in SgUntyped.str
//fast-to-sage =
//{l1,l2,l3
//  :  ?Function(FunctionStmt(label,prefix,name,args,binding),Scope(l1,l2,l3),end)
//  ;  !SgUntypedFunctionDeclaration(label,
//                                     <sg-fortran-keyword>FORTRAN_FUNCTION(),
//                                     name,
//                                     SgUntypedInitializedNameList(<map(sg-initialized-name)>args),
//                                     <sg-build-void-type>,
//                                     SgUntypedFunctionScope(label,<sg-fortran-keyword>FORTRAN_FUNCTION(),
//                                                            SgUntypedDeclarationStatementList(l1),
//                                                            SgUntypedStatementList(l2),
//                                                            SgUntypedFunctionDeclarationList(l3)),
//                                     end)
//}

//R1233 - TODO: prefix, binding
fast-to-sage =
{l1,l2,l3
  :  ?Subroutine(SubroutineStmt(label,prefix,name,args,binding),Scope(l1,l2,l3),end)
  ;  !SgUntypedSubroutineDeclaration(label,
                                     <sg-fortran-keyword>FORTRAN_SUBROUTINE(),
                                     name,
                                     SgUntypedInitializedNameList(<map(sg-initialized-name)>args),
                                     <sg-build-void-type>,
                                     SgUntypedFunctionScope(label,<sg-fortran-keyword>FORTRAN_SUBROUTINE(),
                                                            SgUntypedDeclarationStatementList(l1),
                                                            SgUntypedStatementList(l2),
                                                            SgUntypedFunctionDeclarationList(l3)),
                                     end)
}

//R1236
fast-to-sage:
  EndSubroutineStmt(label,name) -> SgUntypedNamedStatement(label,<sg-fortran-keyword>FORTRAN_END_SUBROUTINE(),name)


no-to-string: no-label()                   -> ""   // R312
no-to-string: no-name()                    -> ""
