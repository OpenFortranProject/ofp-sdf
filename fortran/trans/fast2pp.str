module fast2pp

imports
   libstratego-lib
   FAST

signature
  constructors

    // These extra constructors are not part of FAST but required for unparsing
    //

    LanguageBinding : Language                       -> LanguageBinding

    FuncPart        : ListStarOfDecl                 -> FuncPart

    ppScope         : SpecPart * ExecPart            -> ppScope
    ppScope         : SpecPart * ExecPart * FuncPart -> ppScope

    ppImplicitStmt  : Label          -> ppImplicitStmt

    ppSubmodule    : OfpSubmodule    -> ppSubmodule
    ppFunction     : OfpFunction     -> ppFunction
    ppSubroutine   : OfpSubroutine   -> ppSubroutine
    ppMpSubprogram : OfpMpSubprogram -> ppMpSubprogram

    ppArrayVar     : Name * ArrayType * Init           -> ppArrayVar
    ppArrayVarLen  : Name * ArrayType * Length * Init  -> ppArrayVarLen
    ppRange        : upper-bound                       -> ppRange
    ppTriplet      : lb * ub * OptColon * stride       -> ppTriplet

    ppArrayType    : ListStarOfRange                   -> ppArrayType
    ppArrayType    : ListStarOfRange * ListStarOfRange -> ppArrayType

    ppCoarrayType  : ListStarOfRange     -> ppArrayType

    ppTargetDecl   : Name * ppArraySpec * ppCoarraySpec  -> ppTargetDecl
    ppArraySpec    :        ppArraySpec                  -> ppArraySpec
    ppCoarraySpec  :                      ppCoarraySpec  -> ppCoarraySpec

    ppArg          : arg                 -> ppArg

    ppVar          : name * init         -> ppVar
    ppVarLen       : name * len * init   -> ppVarLen
    ppLiteralKind  : val                 -> ppLiteralKind

    ppCharNoLen    : kind                -> ppCharNoLen

    ppLetterSpec   : Spec                -> ppLetterSpec
    ppLetterSpec   : Spec * Spec         -> ppLetterSpec

    ppTypeSpec     : Spec                -> ppTypeSpec

    ppPartRef           : name * ss * is -> ppPartRef
    ppSectionSubscripts : ss             -> ppSectionSubscripts
    ppImageSelector     : ss             -> ppImageSelector

    ppTypeBoundProcDecl      : name                    -> ppTypeBoundProcDecl

    ppDerivedType            : name                    -> ppDerivedType
    ppDerivedTypeStmt        : label * name            -> ppDerivedTypeStmt
    ppDerivedTypeStmt_attrs  : label * attrs * name    -> ppDerivedTypeStmt_attrs
    ppDerivedTypeStmt_params : label * name * params   -> ppDerivedTypeStmt_params

    ppDataComponentDefStmt   : label * type * comps    -> ppDataComponentDefStmt           // R431

    ppTypeParamDecl          : name                    -> ppTypeParamDecl                  // R432

    ppTypeBoundProcedureStmt : label * procdecls       -> ppTypeBoundProcedureStmt         // R448

    ppTypeParamSpec          : value                   -> ppTypeParamSpec                  // R454
    ppEnumerator             : name                    -> ppEnumerator                     // R460

    ppAllocateStmt      : label * spec * allocs        -> ppAllocateStmt
    ppAllocateStmt      : label * spec * allocs * opts -> ppAllocateStmt
    ppAllocation        : object                       -> ppAllocation
    ppAllocationShape   : object * shape               -> ppAllocationShape
    ppAllocationCoshape : object * coshape             -> ppAllocationCoshape

    ppDeallocateStmt    : label * allocs               -> ppDeallocateStmt
    ppDeallocateStmt    : label * allocs * opts        -> ppDeallocateStmt

    ppPointerAssignmentStmt : label * obj * expr           -> ppPointerAssignmentStmt
    ppPointerAssignmentStmt : label * obj * bounds * expr  -> ppPointerAssignmentStmt
    ppDataPointerObject     : var                          -> ppDataPointObject

    ppWhereConstructStmt  : OptLabel * Expr                         -> ppWhereConstructStmt

    ppSaveStmt            : OptLabel                                -> ppSaveStmt          // R553

    ppTypeDeclarationStmt : OptLabel * Type * List(EntityDecl)      -> ppTypeDeclarationStmt

    ppNonlabelDoStmt  : OptLabel * OptLoopControl                   -> ppNonlabelDoStmt    // R817

    ppBlock           : OptLabel * Scope * EndBlockStmt             -> ppBlock

    ppAssociateStmt   : OptLabel * NoName * List(Association)       -> ppAssociateStmt     // R803

    ppIfThenStmt      : OptLabel * OptName * LogicalExpr            -> ppIfThenStmt        // R833

    ppSelectCaseStmt  : OptLabel * OptName * CaseExpr               -> ppSelectCaseStmt    // R838
    ppDefaultCaseStmt : OptLabel * name                             -> ppDefaultCaseStmt

    ppSelectTypeStmt  : OptLabel * OptName * OptName * Selector     -> ppSelectTypeStmt    // R847

    ppSyncImagesStmt  : OptLabel * ImageSet * SyncList              -> ppSyncImagesStmt    // R860

    ppReadStmt        : OptLabel * IoControlList * InputList        -> ppReadStmt          // R910
    ppReadFMTStmt     : OptLabel * Format        * InputList        -> ppReadFMTStmt
    ppWriteStmt       : OptLabel * IoControlList * OutputList       -> ppWriteStmt         // R911
    ppPrintStmt       : OptLabel * Format        * OutputList       -> ppPrintStmt         // R912

    ppIoImpliedDoControl : DoVariable * IntExpr * IntExpr           -> ppIoImpliedDoControl // R920

    ppUseStmt         : OptLabel * nature * name                    -> ppUseStmt

    ppProcDecl        : name                                        -> ppProcDecl           // R1214

    opt-list          : list            -> opt-list
    no-comma-opt-list : list            -> no-comma-opt-list
    append-colon      : name            -> append-colon
    append-ptr-assign : name            -> append-ptr-assign

strategies

  main =
    io-wrap(fast2pp)

  fast2pp =
      outermost(ast-to-pp)
    ; outermost(no-to-none)

  pp-opt-list =
      ? []             ;  ! no-list()
   <+ ? list           ;  ! opt-list(<id>)

  pp-no-comma-opt-list =
      ? []             ;  ! no-list()
   <+ ? list           ;  ! no-comma-opt-list(<id>)

  pp-append-colon =
      ? no-name()      ;  ! <id>
   <+ ? name           ;  ! append-colon(<id>)

  pp-append-ptr-assign =
      ? no-name()      ;  ! <id>
   <+ ? name           ;  ! append-ptr-assign(<id>)

// Remove the UNIT appl an io-control-spec if is the first spec in the list.
//
  pp-remove-unit =
      ? [head|tail]
   ;  ! head
   ;  ? UNIT(num)
   ;  ! <concat>[[num], tail]
  <+  ! <id>

rules

// Make a separate scope without FuncPart when empty.  This will allow the implied contains
// statement to be unparsed when the FuncPart is present.
//
ast-to-pp:  Scope(decls,exes,[])             -> ppScope(decls,exes)

ast-to-pp:  Scope(decls,exes,funcs)          -> ppScope(decls,exes,FuncPart(funcs))

//R404
ast-to-pp:  CHARACTER(no-char-length(),kind) -> ppCharNoLen(kind)

//R408
ast-to-pp:  IntVal(val,Kind(kval))           -> IntVal(val,ppLiteralKind(kval))

//R426
ast-to-pp =
      ?DerivedTypeStmt(label,[],name,[])      ;  !ppDerivedTypeStmt(label,name)
  <+  ?DerivedTypeStmt(label,attrs,name,[])   ;  !ppDerivedTypeStmt_attrs(label,attrs,name)
  <+  ?DerivedTypeStmt(label,[],name,params)  ;  !ppDerivedTypeStmt_params(label,name,params)

//R431
ast-to-pp:  DataComponentDefStmt(label,type,[],comps)   ->  ppDataComponentDefStmt(label,type,comps)

//R432
ast-to-pp:  TypeParamDecl(name,no-expr())               ->  ppTypeParamDecl(name)

//R440
ast-to-pp:  Pass(no-arg-name())                         ->  PASS()

//R445
ast-to-pp:  TypeBoundProcedureStmt(label,[],procs)      -> ppTypeBoundProcedureStmt(label,procs)


//R449
ast-to-pp:  TypeBoundProcDecl(name,no-procedure-name()) -> ppTypeBoundProcDecl(name)

//R453
ast-to-pp:  DerivedType(name,[])                        ->  ppDerivedType(name)

//R454
ast-to-pp:  TypeParamSpec(no-keyword(),value)           ->  ppTypeParamSpec(value)

//R460
ast-to-pp:  Enumerator(name,no-expr())                  ->  ppEnumerator(name)

//R501
ast-to-pp:  TypeDeclarationStmt(label,type,[],vars)     ->  ppTypeDeclarationStmt(label,type,vars)

//R503
ast-to-pp =
      ? Var(name,ArrayType(CHARACTER_LEN(len),dims,[]),init)
    ; ! ppArrayVarLen(name,ppArrayType(dims),len,init)
   <+ ? Var(name,ArrayType(type,dims,[]),init)
    ; ! ppArrayVar(name,ppArrayType(dims),init)
   <+ ? Var(name,ArrayType(CHARACTER_LEN(len),[],codims),init)
    ; ! ppArrayVarLen(name,ppCoarrayType(codims),len,init)
   <+ ? Var(name,ArrayType(type,[],codims),init)
    ; ! ppArrayVar(name,ppCoarrayType(codims),init)
   <+ ? Var(name,ArrayType(CHARACTER_LEN(len),dims,codims),init)
    ; ! ppArrayVarLen(name,ppArrayType(dims,codims),len,init)
   <+ ? Var(name,ArrayType(type,dims,codims),init)
    ; ! ppArrayVar(name,ppArrayType(dims,codims),init)

ast-to-pp =
      ? Var(name,CHARACTER_LEN(len),init)   ; ! ppVarLen(name,len,init)
  <+  ? Var(name,type,init)                 ; ! ppVar(name,init)

//R508
//  ast-to-pp:  LanguageBinding(lang,no-binding-name()) -> LanguageBinding("C")

//R510
ast-to-pp:  SaveStmt(label,[])               -> ppSaveStmt(label)

//R553
ast-to-pp:  Range(no-lower-bound(), upper)   -> ppRange(upper)

//R557
ast-to-pp =
      ? TargetDecl(name,[]       ,[])           ; ! ppTargetDecl(name,no-list()             ,no-list())
  <+  ? TargetDecl(name,arrayspec,[])           ; ! ppTargetDecl(name,ppArraySpec(arrayspec),no-list())
  <+  ? TargetDecl(name,[]       ,coarrayspec)  ; ! ppTargetDecl(name,no-list()             ,ppCoarraySpec(coarrayspec))
  <+  ? TargetDecl(name,arrayspec,coarrayspec)  ; ! ppTargetDecl(name,ppArraySpec(arrayspec),ppCoarraySpec(coarrayspec))

//R560
ast-to-pp:  ImplicitStmt(label,[])           -> ppImplicitStmt(label)

//R562
//  ast-to-pp:  LetterSpec(s1,no-letter())   -> ppLetterSpec(s1)
//  ast-to-pp:  LetterSpec(s1,s2)            -> ppLetterSpec(s1,s2)

//R612
ast-to-pp:  PartRef(name,ss,is)              -> ppPartRef(name,ppSectionSubscripts(ss),ppImageSelector(is))

stride-separator = ?no-stride() < !"" + !":"

//R621
ast-to-pp:  Triplet(lb,ub,stride)            -> ppTriplet(lb,ub,<stride-separator>stride,stride)

pp-type-spec = ?no-type-spec() < !no-type-spec() + !ppTypeSpec(<id>)

//R626
ast-to-pp =
      ?AllocateStmt(label,spec,allocs,[])          ;  !ppAllocateStmt(label,<pp-type-spec>spec,allocs)
  <+  ?AllocateStmt(label,spec,allocs,opts)        ;  !ppAllocateStmt(label,<pp-type-spec>spec,allocs,opts)

//R631
ast-to-pp =
      ?Allocation(obj,[],[])                       ;  !ppAllocation(obj)
  <+  ?Allocation(obj,shape,[])                    ;  !ppAllocationShape(obj,shape)
  <+  ?Allocation(obj,[],coshape)                  ;  !ppAllocationCoshape(obj,coshape)

//R640
ast-to-pp =
      ?DeallocateStmt(label,allocs,[])             ;  !ppDeallocateStmt(label,allocs)
  <+  ?DeallocateStmt(label,allocs,opts)           ;  !ppDeallocateStmt(label,allocs,opts)

//R733
ast-to-pp =
      ?PointerAssignmentStmt(label,obj,[],  expr)  ;  !ppPointerAssignmentStmt(label,obj     ,expr)
  <+  ?PointerAssignmentStmt(label,obj,list,expr)  ;  !ppPointerAssignmentStmt(label,obj,list,expr)

//R734
ast-to-pp:  DataPointerObject(var,no-name())       ->  ppDataPointerObject(var)

//R743
ast-to-pp:  WhereConstructStmt(label,no-name(),expr) ->  ppWhereConstructStmt(label,expr)

//R803
//  ast-to-pp:
//    AssociateStmt(label,name,list,eos) -> ppAssociateStmt(label,<append-colon>name,list,eos)

//R807
ast-to-pp:  Block(label,no-name(),scope,end) -> ppBlock(label,scope,end)

//R817
ast-to-pp:  NonlabelDoStmt(label,no-name(),control) -> ppNonlabelDoStmt(label,control)

//R833
ast-to-pp:  IfThenStmt(label,name,expr)           ->   ppIfThenStmt(label,<pp-append-colon>name,expr)

//R838
ast-to-pp:  SelectCaseStmt(label,name,expr)       ->   ppSelectCaseStmt(label,<pp-append-colon>name,expr)

//R840
ast-to-pp:  CaseStmt(label,DEFAULT(),name)        ->   ppDefaultCaseStmt(label,name)

//R847
ast-to-pp:  SelectTypeStmt(label,conname,name,sel)
     ->   ppSelectTypeStmt(label,<pp-append-colon>conname,<pp-append-ptr-assign>name,sel)

//R860
ast-to-pp:  SyncImagesStmt(label,set,list)        ->   ppSyncImagesStmt(label,set,<pp-opt-list>list)

//R910
ast-to-pp =
      ?ReadStmt(label,cntl,  input)    ;  !ppReadStmt(label,<pp-remove-unit>cntl,<pp-no-comma-opt-list>input)
  <+  ?ReadFMTStmt(label,format,input) ;  !ppReadFMTStmt(label,format,<pp-opt-list>input)

//R911
ast-to-pp =
      ?WriteStmt(label,cntl,output)    ;  !ppWriteStmt(label,<pp-remove-unit>cntl,<pp-no-comma-opt-list>output)

//R912
ast-to-pp =
      ?PrintStmt(label,format,output)  ;  !ppPrintStmt(label,format,<pp-opt-list>output)

//R920
ast-to-pp:  IoImpliedDoControl(dovar,begin,end,no-stride())  -> ppIoImpliedDoControl(dovar,begin,end)

//R1109
ast-to-pp:  UseStmt(label,nature,name,[])    -> ppUseStmt(label,nature,name)

//R1214
ast-to-pp:  ProcDecl(name,no-init())         -> ppProcDecl(name)

//R1222
ast-to-pp:  Arg(no-keyword(),arg)            -> ppArg(arg)

//R1237
//ast-to-pp:  MpSubprogram(name, scope)        -> ppMpSubprogram(scope)


//  no-to-none: no-kind-param()              -> None()   // R408
//  no-to-none: no-char-selector()           -> None()   // R420
//  no-to-none: no-char-length()             -> None()   // R503
//  no-to-none: no-init()                    -> None()   // R503
//  no-to-none: no-kind()                    -> None()   // R405
//  no-to-none: no-prefix()                  -> None()   // R1225
//  no-to-none: no-language-binding()        -> None()   // R1229
//  no-to-none: no-generic-spec()            -> None()   // R1204
//  no-to-none: no-module-name()             -> None()   // R1106
//  no-to-none: no-module-nature()           -> None()   // R1109
//  no-to-none: no-block-data-name()         -> None()   // R1122
//  no-to-none: no-proc-interface()          -> None()   // R1212
//  no-to-none: no-subroutine-name()         -> None()   // R1236
//  no-to-none: no-binding-name()            -> None()   // R508
//  no-to-none: no-expr()                    -> None()   // R1241
//  no-to-none: no-stop-code()               -> None()   // R857
//  no-to-none: no-r()                       -> None()   // R1004
//  no-to-none: no-m()                       -> None()   // R1007
//  no-to-none: no-e()                       -> None()   // R1007
//  no-to-none: no-name()                    -> None()   // R839, R850
//  no-to-none: no-parent-submodule-name()   -> None()   // R1118
//  no-to-none: no-high()                    -> None()   // R844
//  no-to-none: no-low()                     -> None()   // R844
//  no-to-none: no-stride()                  -> None()   // R920
//  no-to-none: no-type-spec()               -> None()   // R626
//  no-to-none: no-lower-bound()             -> None()   // R633
//  no-to-none: no-component-name()          -> None()   // R734
//  no-to-none: no-type-bound-procedure-part()  -> None()   //R445
//  no-to-none: no-binding-private-stmt()    -> None()   // R446
//  no-to-none: no-arg-name()                -> None()   // R451
//  no-to-none: no-subprogram-part()         -> None()   // R210
//  no-to-none: no-repeat()                  -> None()   // R541
//  no-to-none: no-forall-step()             -> None()   // R753
//  no-to-none: no-mask-expr()               -> None()   // R752
//  no-to-none: no-else-stmt()               -> None()   // R832
//  no-to-none: no-loop-control()            -> None()   // R818
//  no-to-none: no-subscript()               -> None()   // R619

  no-to-none: ppSectionSubscripts(no-section-subscripts()) -> no-section-subscripts()
  no-to-none: ppImageSelector(no-image-selector())         -> no-image-selector()