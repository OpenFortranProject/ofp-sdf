module fixed-to-free

imports
   libstratego-lib
   FixedForm

signature
  constructors

  ppchar  :  StartChar  -> ppchar

  ppStmtBlock : Stmt * FollowLines -> ppStmtBlock

  // For ambiguities
  amb : list -> choice


strategies //=================START OF STRATEGIES============================

  io-fixed-to-free =
    io-wrap(fixed-to-free)

  fixed-to-free =
//      outermost(fixed-disamb)
      innermost(fixed-to-free-comments)
    ; innermost(fixed-to-free-form)
    ; outermost(fixed-to-free-continuation)
//    ; innermost(fix-dos-line-endings)


rules //========================START OF RULES===============================

/**
 * Remove ambiguity between statements containing all whitespace and blank lines.
 *   - replaces blank "statement" with a blank line
 */
fixed-disamb =
      ? amb([Stmt(_,_,_,_), BlankLine(ws, eol)])
    ; ! BlankLine(ws, eol)
   <+ ? amb([Stmt(_,_,_,_), FreeFormComment(ws,ch,str,eol)])
    ; ! FreeFormComment(ws,ch,str,eol)
   <+ ? amb([BlankLine(ws, eol), Stmt(_,_,_,_)])
    ; ! BlankLine(ws, eol)
   <+ ? amb([BlankLine(ws, eol), Continuation(_,_,_,_)])  /* DOS blank lines with spaces */
    ; ! BlankLine(ws, eol)


/**
 * Change comment character to '!'
 */
fixed-to-free-comments =  ? comchar("C")            ;  ! comchar("!")
                      <+  ? comchar("c")            ;  ! comchar("!")
                      <+  ? comchar("*")            ;  ! comchar("!")


/**
 * Change DOS line endings to unix (unparsing doesn't work properly for DOS "\r\n" line endings)
 */
fix-dos-line-endings:  eol("\r\n")                 -> eol("\n")


/**
 * Change fixed-form directive to free form
 */
fixed-to-free-form:  Comment(comchar(_), "DEC$ NOFREEFORM", eol("\n"))
                                                  -> Comment(comchar("!"), "DEC$ FREEFORM", eol("\n"))
fixed-to-free-form:  Comment(comchar(_), "DIR$ FIXED", eol("\n"))
                                                  -> Comment(comchar("!"), "DIR$ FREE", eol("\n"))

/**
 * Change start character to ' '
 */
fixed-to-free-form:  stchar(_)                    -> ppchar(" ")


/**
 * Change continuation character to '&'
 */
fixed-to-free-form:  conchar(_)                   -> ppchar("&")


/**
 * Add continuation character to end of continuations (except for last)
 *
 *  This works by reversing the follow list in a StmtBlock, separating the
 *  list at the last Continuation (now the first) and putting the entire
 *  list back together in the proper order.
 */
fixed-to-free-continuation =

 /* has continuation branch */
    ? StmtBlock(stmt,follow)
  ; <has-continuation> follow
  ; <split-fetch-keep(?Continuation(_,_,_,_))> <reverse> follow
  ; ? (before, split, after)
  ; <concat> [<reverse(insert-cont-char)>after, [split], <reverse>before]
  ; ! ppStmtBlock(<insert-cont-char>stmt, <id>)

/* no continuation branch */
 <+ ? StmtBlock(stmt,follow)
  ; ! ppStmtBlock(stmt,follow)


/**
 * Succeeds if a continuation line exists
 */
has-continuation =
    ? list
  ; <fetch(?Continuation(_,_,_,_))> list
  ; ! list


/**
 * Insert continuation character at end of current statement (free format style)
 */
insert-cont-char =
    ? Stmt(begin,char,text,end)
  ; ! Stmt(begin,char,<insert-cont-char-in-text>text,end)

 <+ ? LabeledStmt(begin,char,text,end)
  ; ! LabeledStmt(begin,char,<insert-cont-char-in-text>text,end)

 <+ ? Continuation(begin,char,text,end)
  ; ! Continuation(begin,char,<insert-cont-char-in-text>text,end)

/* these are left alone */

 <+ ? BlankLine(_,_)
 <+ ? Comment(_,_,_)
 <+ ? Preprocess(_,_,_)

/**
 * Insert continuation character in text (before comment or at end of text)
 */
insert-cont-char-in-text =
    <string-tokenize(|['!'])> <id>
  ; (? [txt]; ![txt,"&"] <+ ? [head|tail]; ![head,"&",<map(prepend-comment-char)>tail])
  ; <concat-strings> <flatten-list> <id>

/**
 * Prepend comment character to string (this takes care of a comment character '!' within a comment)
 */
prepend-comment-char =
     is-string
  ;  ? str
  ;  ! <concat-strings> ["!", str]