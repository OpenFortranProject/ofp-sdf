module ppm-to-fast

imports
   libstratego-lib
   FAST
   PPM

signature
  constructors

strategies //=================START OF STRATEGIES============================

  io-ppm-to-fast =
    io-wrap(ppm-to-fast)

// ppm-to-fast
// -----------
// 1. Move declarations from exec list to decl list as they may be wrong.
//      - because ImplicitPostfixStmt not recognized by ofp2fast strategy.
// 2. Add explicit type declarations based on ImplicitPostfixStmt
// 3. Remove the (now unneeded) ImplicitPostfixStmt
//
  ppm-to-fast =
{ save
    :  ?Program(units)
    ;  topdown(try(ppm-fixup-decl-part))
    ;  topdown(try(ppm-add-type-decls))
    ;  topdown(try(ppm-remove-affix-stmts))
    ; ? save
    ;  !"--------------------------------------------------------------------------------------"
    ;  debug()
    ;  !save
}


rules //========================START OF RULES===============================


// Add PPM variables to declarations
// ---------------------------------

// Insert type declaration for PPM identifiers
ppm-add-type-decls =
{ st, vt
  :  ? Scope(decls,execs,funcs)
  ;  new-hashtable => st
  ;  new-hashtable => vt
  ;  !decls
  ;  topdown(try(ppm-get-suffix-symbols(|st)))
  ;  ! execs
  ;  topdown(try(ppm-get-suffix-variables(|st,vt)))
  ;  <hashtable-getlist> vt
  ;  <map(ppm-add-type-decl)> <id>
  ;  ! Scope(<concat>[decls,<id>],execs,funcs)
}

// Build new TypeDeclarationStmt
ppm-add-type-decl =
     ? (name, type)
  ;  ! TypeDeclarationStmt(no-label(), type, [], [Var(name,type,no-init())])

// Create a symbol table of (suffix,type) key/value pairs
ppm-get-suffix-symbols(|lt) =
     ? ImplicitPostfixStmt(label,suffix_list,eos)
  ;  <flatten-list> <map(ppm-add-affix-spec(|lt))> suffix_list
  ;  ! ImplicitPostfixStmt(label,suffix_list,eos)

// Find all variables that need type declaration based on suffix
ppm-get-suffix-variables(|st,vt) =
     ? AssignmentStmt(label,VarDef(var),lhs)
  ;  <hashtable-keys> st
  ;  <map(ppm-add-affix-variable(|st,vt,var))> <id>
  ;  ! AssignmentStmt(label,VarDef(var),lhs)

// Create a symbol table of (variable,type) key/value pairs.
//   - the type will be based on the suffix of the variable
ppm-add-affix-variable(|st,vt,var) =
     ? suffix
  ;  <string-ends-with(|suffix)> var
  ;  <hashtable-get(|suffix)> st
  ;  ? type
  ;  <hashtable-put(|var,type)> vt
  ;  ! suffix
 <+  ! [ ]

// Add suffix strings and type to the (suffix,type) table
ppm-add-affix-spec(|lt) =
     ? ImplicitAffixSpec(type,spec_list)
  ;  <map(ppm-add-affix-symbol(|lt,type))> spec_list
  ;  ! ImplicitAffixSpec(type,spec_list)

// Add this suffix and type to the (suffix,type) table
ppm-add-affix-symbol(|lt,type) =
     ? quoted_affix
  ;  <explode-string> quoted_affix
  ;  <flatten-list> <map(ppm-remove-quote)> <id>  // remove quoted strings, e.g., "\"str\""
  ;  <implode-string> <id>
  ;  ? affix
  ;  <hashtable-put(|affix,type)> lt
  ;  ! affix

// Remove quote character (34)
ppm-remove-quote =
     ? 34   ;  ! []
 <+  ? num  ;  ! num

is-specification-part =
     ? ImplicitStmt(_,_)
 +>  ? ImplicitPostfixStmt(_,_,_)
 +>  ? ParameterStmt(_,_)
 +>  ? TypeDeclarationStmt(_,_,_,_)

// The ppm-fixup-spec-part strategy transfers statements in the execution list to
// the declaration list.  The statements transferred are in the execution list because
// ofp2fast doesn't recogize ImplicitPostfixStmt and so fast-fixup-spec-part may fail
// to copy it to the correct list.
//
ppm-fixup-decl-part =
{decls
  :  ? Scope(slist,elist,funcs)
  ;  <concat>[slist,<take-while(is-specification-part)> elist] => decls
  ;  <drop-while(is-specification-part)> elist
  ;  ! Scope(decls,<id>,funcs)
}

is-affix-stmt =
     ? ImplicitPostfixStmt(_,_,_)

// Remove all ImplicitPostfixStmts from the decl list
ppm-remove-affix-stmts =
     ? Scope(decls,execs,funcs)
  ;  <drop-while(is-affix-stmt)> decls
  ;  ! Scope(<id>,execs,funcs)
